{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0},{"_id":"themes/jacman/source/img/canvas3.png","path":"img/canvas3.png","modified":0},{"_id":"themes/jacman/source/img/canvas2.png","path":"img/canvas2.png","modified":0},{"_id":"themes/jacman/source/img/canvas.png","path":"img/canvas.png","modified":0},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0},{"_id":"themes/jacman/source/img/6.png","path":"img/6.png","modified":0},{"_id":"themes/jacman/source/img/5.png","path":"img/5.png","modified":0},{"_id":"themes/jacman/source/img/4.png","path":"img/4.png","modified":0},{"_id":"themes/jacman/source/img/3.png","path":"img/3.png","modified":0},{"_id":"themes/jacman/source/img/21.png","path":"img/21.png","modified":0},{"_id":"themes/jacman/source/img/2.png","path":"img/2.png","modified":0},{"_id":"themes/jacman/source/img/1.png","path":"img/1.png","modified":0},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0}],"Cache":[{"_id":"source/CNAME","shasum":"c06281e01145543bf6f80e378ac2e5be5b4d1754","modified":1428806209000},{"_id":"source/_posts/aboutObject.md","shasum":"a7e30ffa3bfbf3fd470f82b0849d1b4e42b3d07b","modified":1428807869000},{"_id":"source/_posts/ajax.md","shasum":"8cf018f6ed30898fe94096692f4f34a64a7ab6ca","modified":1428806209000},{"_id":"source/_posts/canvas.md","shasum":"5031b7cd46011bb09d8fd7fb129f1c93d4d24b1a","modified":1428806209000},{"_id":"source/_posts/hei-hexo.md","shasum":"b0c72d50a78d01aeb0273a5d501229f17b40964c","modified":1428806209000},{"_id":"source/_posts/mobile.md","shasum":"6b5af2baa587c2a0f223e38cb98caa7498f60206","modified":1428806209000},{"_id":"source/_posts/关于JSON对象的兼容性和一些小问题.md","shasum":"0bc4cad946cde75a829c1e9940682e2b0d0fbe63","modified":1428810185000},{"_id":"source/_posts/运算符.md","shasum":"fb9c3d566c4f909a8e0b0c4b9bd40f240dd10c73","modified":1428806209000},{"_id":"source/about/index.md","shasum":"72467cb137600479c6534b013a217d6c7ca4bff3","modified":1428806209000},{"_id":"source/resource/index.md","shasum":"d1f22cf197732b901960ee588af956e2fe7be74a","modified":1428806209000},{"_id":"themes/jacman/LICENSE","shasum":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1428806209000},{"_id":"themes/jacman/README.md","shasum":"ba1b1d6edd9b0df8790fc6285ec0bcdd7fd50120","modified":1428806209000},{"_id":"themes/jacman/_config.yml","shasum":"85c066f5d2ca54a250239caa518ecac8d5e34511","modified":1428806209000},{"_id":"themes/jacman/README_zh.md","shasum":"1d65e61571e8f7000f4ee86b3ab9cc7837a1c2c9","modified":1428806209000},{"_id":"themes/jacman/languages/zh-TW.yml","shasum":"837a13c10a723600f31ce88e8c22acd1b23fdc5c","modified":1428806209000},{"_id":"themes/jacman/languages/zh-CN.yml","shasum":"1228a1f5f9f49ebbe6202a3088d20d6a1a6f873d","modified":1428806209000},{"_id":"themes/jacman/languages/default.yml","shasum":"7a80728d903d5e67298f9fc8472f4b646d112500","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","shasum":"fd004beb8d4500afd5fb3b3871a95afa2a375f16","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","shasum":"fc979ef6dc916f6d9880b3d085b7cdc6c82d3127","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/archive.ejs","shasum":"8c5acd00d1785a7fd914adf50a07ae3a8b38fa77","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/article.ejs","shasum":"dd7e137345123899a66180d6cc45adf2e81351c3","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","shasum":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/footer.ejs","shasum":"8d45de4a84fa178c1a72f42b725dd66b95ceeeed","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/categories.ejs","shasum":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/head.ejs","shasum":"1e2c78d0d88ed2e81992a598593be555b9f0ad37","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","shasum":"80b7c13a0de54c2224f52881f4195c27a71520d5","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","shasum":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","shasum":"5e6cceb93013526b90e1a53f0242c9cfaf94995b","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/header.ejs","shasum":"0c3dbe0e09bd0d7a7904a1c1797790e4bf8faf65","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","shasum":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","shasum":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","shasum":"5cfdb816857210f436c5a0b71185300651471fd8","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","shasum":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","shasum":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","shasum":"6d789715314a00915dc4518f8a0a6d4205ab6fd3","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","shasum":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/search.ejs","shasum":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","shasum":"c4f527fff0070fbe65919053a16224412317f40d","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/tags.ejs","shasum":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1428806209000},{"_id":"themes/jacman/layout/_partial/totop.ejs","shasum":"e7568bd13d4547a096f7e71b19630e99ce7dcb3e","modified":1428806209000},{"_id":"themes/jacman/layout/_widget/archive.ejs","shasum":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1428806209000},{"_id":"themes/jacman/layout/_widget/category.ejs","shasum":"9b4cc6be18aa6c5da4cf45913d5be83fc33081db","modified":1428806209000},{"_id":"themes/jacman/layout/_widget/links.ejs","shasum":"2a02850c638936c11b230f935fb58f2059297dc2","modified":1428806209000},{"_id":"themes/jacman/layout/_widget/rss.ejs","shasum":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1428806209000},{"_id":"themes/jacman/layout/_widget/tag.ejs","shasum":"759bc3a4e5098dc29c2e6b209fde37791db70e31","modified":1428806209000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","shasum":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1428806209000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","shasum":"f066cafeb2c39a8cccd1c3b921a66e6eaa801c20","modified":1428806209000},{"_id":"themes/jacman/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1428806209000},{"_id":"themes/jacman/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1428806209000},{"_id":"themes/jacman/layout/index.ejs","shasum":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1428806209000},{"_id":"themes/jacman/layout/layout.ejs","shasum":"b8587862383e0e62eeb5476915e6eea39a311a4b","modified":1428806209000},{"_id":"themes/jacman/layout/page.ejs","shasum":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1428806209000},{"_id":"themes/jacman/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1428806209000},{"_id":"themes/jacman/layout/post.ejs","shasum":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1428806209000},{"_id":"themes/jacman/source/css/_base/code.styl","shasum":"b6d284924964a2edece71a2b86c346c3dfe08f39","modified":1428806209000},{"_id":"themes/jacman/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1428806209000},{"_id":"themes/jacman/source/css/_base/font.styl","shasum":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1428806209000},{"_id":"themes/jacman/source/css/_base/public.styl","shasum":"a754022b7dd70432bdc3c2c9dc15ac7ca6ca72cf","modified":1428806209000},{"_id":"themes/jacman/source/css/_base/variable.styl","shasum":"adc5c07319cbb427167b8e6ad9edeeeadef64bf6","modified":1428806209000},{"_id":"themes/jacman/source/css/_partial/article.styl","shasum":"bd79f8d06b96090a59856bce82a9355ac7bac3cf","modified":1428806209000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","shasum":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1428806209000},{"_id":"themes/jacman/source/css/_partial/aside.styl","shasum":"db8ddd03b1a905471d2553fe29e807af2aa53847","modified":1428806209000},{"_id":"themes/jacman/source/css/_partial/footer.styl","shasum":"8fd7db54dab1321c66fd2acc6b8415a7a4c586d2","modified":1428806209000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","shasum":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1428806209000},{"_id":"themes/jacman/source/css/_partial/header.styl","shasum":"f9fea5d42e3f2ec3cede627492ee47908d60a22a","modified":1428806209000},{"_id":"themes/jacman/source/css/_partial/helper.styl","shasum":"e5238015ac6ef5ed458d307a0aa52fda03c295f7","modified":1428806209000},{"_id":"themes/jacman/source/css/style.styl","shasum":"89070fcce9a70c82ea5559ae8f6efc60e624c6d3","modified":1428806209000},{"_id":"themes/jacman/source/css/_partial/totop.styl","shasum":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1428806209000},{"_id":"themes/jacman/source/css/_partial/index.styl","shasum":"dad6d2a2949b418df7accd763baaa03d182de787","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1428806209000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1428806209000},{"_id":"themes/jacman/source/font/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1428806209000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1428806209000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","shasum":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1428806209000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1428806209000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1428806209000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1428806209000},{"_id":"themes/jacman/source/font/fontdiao.eot","shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1428806209000},{"_id":"themes/jacman/source/font/fontdiao.ttf","shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1428806209000},{"_id":"themes/jacman/source/img/1.png","shasum":"c404c1b33b680e4066dbfa6aba4d0b5c0a0216fa","modified":1428806209000},{"_id":"themes/jacman/source/font/fontdiao.woff","shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1428806209000},{"_id":"themes/jacman/source/img/2.png","shasum":"b99695b7a4d1c1f8e92c885d5c5c3c20b41771fa","modified":1428806209000},{"_id":"themes/jacman/source/img/3.png","shasum":"9a32d2c76707ac1d5d4d8c5361c698f9726a30e6","modified":1428806209000},{"_id":"themes/jacman/source/img/4.png","shasum":"992c140b56cc9bb53bec9d873a4077e1f9a8a801","modified":1428806209000},{"_id":"themes/jacman/source/img/canvas.png","shasum":"06653d3938920e32c2b0ab5c77f8b655bb8b55c1","modified":1428806209000},{"_id":"themes/jacman/source/img/author.jpg","shasum":"e4ed85988633c407fb851831fe56ef8e4e3e6ad6","modified":1428806209000},{"_id":"themes/jacman/source/img/canvas2.png","shasum":"cb7e22f37f4a35ce844a82aba307a9097656a451","modified":1428806209000},{"_id":"themes/jacman/source/img/canvas3.png","shasum":"fb2329dcfefaf7d14a55b4c989fd6fef663da174","modified":1428806209000},{"_id":"themes/jacman/source/img/favicon.ico","shasum":"64547e1f027aae761195aa4eaa0199859fb85cda","modified":1428806209000},{"_id":"themes/jacman/source/img/jacman.jpg","shasum":"4b46b81f0b9353501dc2a2933939e052eb4906b7","modified":1428806209000},{"_id":"themes/jacman/source/img/logo.svg","shasum":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1428806209000},{"_id":"themes/jacman/source/img/logo.png","shasum":"e1a16b2cfa884585fe35cbfd5c7033dc108f3dcd","modified":1428806209000},{"_id":"themes/jacman/source/img/scrollup.png","shasum":"9c6ea22d2f0d98c3465fcf3347904c6197f4faff","modified":1428806209000},{"_id":"themes/jacman/source/js/gallery.js","shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1428806209000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1428806209000},{"_id":"themes/jacman/source/js/totop.js","shasum":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1428806209000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","shasum":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1428806209000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1428806209000},{"_id":"themes/jacman/source/font/fontdiao.svg","shasum":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1428806209000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","shasum":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1428806209000},{"_id":"themes/jacman/source/img/5.png","shasum":"a206cdc6e6e817e30903d4b7f1c68e7be8e6fbff","modified":1428806209000},{"_id":"themes/jacman/source/img/6.png","shasum":"f3525eef2bd323b127f36f1bb160be3b74260ac7","modified":1428806209000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1428806209000},{"_id":"themes/jacman/source/img/21.png","shasum":"e907261abaa7c6e755e0a0806dc0dff1102c9bae","modified":1428806209000},{"_id":"public/CNAME","modified":1429027764002,"shasum":"c06281e01145543bf6f80e378ac2e5be5b4d1754"},{"_id":"public/js/totop.js","modified":1429027764006,"shasum":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb"},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1429027764008,"shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"public/js/jquery-2.0.3.min.js","modified":1429027764009,"shasum":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d"},{"_id":"public/js/gallery.js","modified":1429027764011,"shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed"},{"_id":"public/img/scrollup.png","modified":1429027764013,"shasum":"9c6ea22d2f0d98c3465fcf3347904c6197f4faff"},{"_id":"public/img/logo.svg","modified":1429027764017,"shasum":"9ae38f7225c38624faeb7b74996efa9de7bf065b"},{"_id":"public/img/logo.png","modified":1429027764022,"shasum":"e1a16b2cfa884585fe35cbfd5c7033dc108f3dcd"},{"_id":"public/img/jacman.jpg","modified":1429027764023,"shasum":"4b46b81f0b9353501dc2a2933939e052eb4906b7"},{"_id":"public/img/favicon.ico","modified":1429027764024,"shasum":"64547e1f027aae761195aa4eaa0199859fb85cda"},{"_id":"public/img/canvas3.png","modified":1429027764026,"shasum":"fb2329dcfefaf7d14a55b4c989fd6fef663da174"},{"_id":"public/img/canvas2.png","modified":1429027764029,"shasum":"cb7e22f37f4a35ce844a82aba307a9097656a451"},{"_id":"public/img/canvas.png","modified":1429027764031,"shasum":"06653d3938920e32c2b0ab5c77f8b655bb8b55c1"},{"_id":"public/img/author.jpg","modified":1429027764037,"shasum":"e4ed85988633c407fb851831fe56ef8e4e3e6ad6"},{"_id":"public/img/6.png","modified":1429027764039,"shasum":"f3525eef2bd323b127f36f1bb160be3b74260ac7"},{"_id":"public/img/5.png","modified":1429027764041,"shasum":"a206cdc6e6e817e30903d4b7f1c68e7be8e6fbff"},{"_id":"public/img/4.png","modified":1429027764043,"shasum":"992c140b56cc9bb53bec9d873a4077e1f9a8a801"},{"_id":"public/img/3.png","modified":1429027764044,"shasum":"9a32d2c76707ac1d5d4d8c5361c698f9726a30e6"},{"_id":"public/img/21.png","modified":1429027764047,"shasum":"e907261abaa7c6e755e0a0806dc0dff1102c9bae"},{"_id":"public/img/2.png","modified":1429027764050,"shasum":"b99695b7a4d1c1f8e92c885d5c5c3c20b41771fa"},{"_id":"public/img/1.png","modified":1429027764055,"shasum":"c404c1b33b680e4066dbfa6aba4d0b5c0a0216fa"},{"_id":"public/font/fontdiao.woff","modified":1429027764058,"shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f"},{"_id":"public/font/fontdiao.ttf","modified":1429027764059,"shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab"},{"_id":"public/font/fontdiao.svg","modified":1429027764062,"shasum":"334a94e6a66a8b089be7315d876bec93efe38d2b"},{"_id":"public/font/fontdiao.eot","modified":1429027764064,"shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9"},{"_id":"public/font/fontawesome-webfont.woff","modified":1429027764068,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/font/fontawesome-webfont.ttf","modified":1429027764073,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/font/fontawesome-webfont.svg","modified":1429027764079,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/font/fontawesome-webfont.eot","modified":1429027764083,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/font/coveredbyyourgrace-webfont.woff","modified":1429027764085,"shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e"},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","modified":1429027764088,"shasum":"194ccb4acf77a03dc25bcc174edb266143704fec"},{"_id":"public/font/coveredbyyourgrace-webfont.svg","modified":1429027764091,"shasum":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53"},{"_id":"public/font/coveredbyyourgrace-webfont.eot","modified":1429027764093,"shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de"},{"_id":"public/font/FontAwesome.otf","modified":1429027764095,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1429027764096,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1429027764104,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1429027764106,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1429027764107,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1429027764108,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1429027764109,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1429027764110,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1429027764111,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1429027764112,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1429027764113,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1429027764115,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1429027764117,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1429027764119,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1429027764121,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1429027764123,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1429027764838,"shasum":"f5f4705a4add32e8dab43aaa892a7ab8b1b427e7"},{"_id":"public/resource/index.html","modified":1429027765105,"shasum":"cdbe6883b87e90af3b9d83c57399926d3b660661"},{"_id":"public/about/index.html","modified":1429027765113,"shasum":"3fbbcb623fadf046a3e152d06737669b50580d0b"},{"_id":"public/2015/04/12/hei-hexo/index.html","modified":1429027765145,"shasum":"3d6d1e68b61f0f0b84a58fc42b79430e3bf0421c"},{"_id":"public/2015/03/16/关于JSON对象的兼容性和一些小问题/index.html","modified":1429027765158,"shasum":"72cca4bbe52e28ee47ecb7621364d6cd96a75e6a"},{"_id":"public/2015/02/25/canvas/index.html","modified":1429027765201,"shasum":"7cb708d69fce76fcaa4f1914bbd8cf2267848fa3"},{"_id":"public/2015/02/23/运算符/index.html","modified":1429027765216,"shasum":"d6b59cf6b9f7dae8bfc02fd66b84619c8dafc51a"},{"_id":"public/2015/02/01/ajax/index.html","modified":1429027765238,"shasum":"86aa3fe9614e947d926ee975624e186e70baad14"},{"_id":"public/2015/01/22/aboutObject/index.html","modified":1429027765257,"shasum":"4e89cfc038b717e4623adb1cc3f9b490bb89bf70"},{"_id":"public/2015/01/20/mobile/index.html","modified":1429027765276,"shasum":"5a16007b62f4891af0b6896268686e433a4d3f73"},{"_id":"public/index.html","modified":1429027765287,"shasum":"9627396c8b1411a9c736257d1cef3a17e8db7c42"},{"_id":"public/archives/index.html","modified":1429027765308,"shasum":"a07211dc2969fb22254f21a35504006001110f22"},{"_id":"public/archives/2015/index.html","modified":1429027765316,"shasum":"8abe940a6943c7f3883d42e450e363ebf44ac719"},{"_id":"public/archives/2015/01/index.html","modified":1429027765324,"shasum":"0d68c8cb7c055c6e6c151b012f8b0512c1a62f94"},{"_id":"public/archives/2015/02/index.html","modified":1429027765331,"shasum":"da2cb00878d99bfff5bea9a23671d508f999d5df"},{"_id":"public/archives/2015/03/index.html","modified":1429027765335,"shasum":"9fef8cca0aa56e751cb9ab5c84b26256ac42c573"},{"_id":"public/archives/2015/04/index.html","modified":1429027765346,"shasum":"1a63033ad47186359b08f4e3c6a29601c36b6e70"},{"_id":"public/categories/文章/index.html","modified":1429027765352,"shasum":"e464a82f90004c3859b1b102be1ebf4656b0088f"},{"_id":"public/categories/articles/index.html","modified":1429027765358,"shasum":"f66399303c360504e7879b1c017cc1d555c526a9"},{"_id":"public/categories/随记/index.html","modified":1429027765366,"shasum":"10c2634086c93790b7867de669dd6f28176385fc"},{"_id":"public/tags/实用小技巧/index.html","modified":1429027765376,"shasum":"61b39252217714c500f3c1940951a2425dbebbc7"},{"_id":"public/tags/博客/index.html","modified":1429027765382,"shasum":"5ca3cea9d533d5cfc2b4ba5c7f609e0e851948fc"},{"_id":"public/tags/那些年踩过的大坑和小坑/index.html","modified":1429027765387,"shasum":"fc07bb7d8a34fa02e365f132b79571df52821270"},{"_id":"themes/jacman/layout/test.ejs","shasum":"6f62bca9e248f2ddd88d475555cb9ad01e950d6f","modified":1429027752000}],"Category":[{"name":"文章","_id":"ci8hi8eo400082sbeio3n632z"},{"name":"articles","_id":"ci8hi8eoa000i2sbeuk1oczfa"},{"name":"随记","_id":"ci8hi8eod000m2sbepnxj5533"}],"Data":[],"Page":[{"title":"资源列表","date":"2015-02-22T04:45:06.000Z","_content":"\n###这里罗列出自己会时常阅读参考的资源，方便查阅和学习：\n\n- [阮一峰的JavaScript标准参考教程](http://javascript.ruanyifeng.com/)\n- [ECMAScript 5.1 Standard](http://barretlee.github.io/ST/ES5.1/)\n- [CSS参考手册](http://css.doyoe.com/)\n- [司徒正美的移动学习资料](https://github.com/RubyLouvre/mobileTech)\n\n\n###工具列表：\n\n- [caniuse.com](http://caniuse.com/)\n","source":"resource/index.md","raw":"title: 资源列表\ndate: 2015-02-22 12:45:06\n---\n\n###这里罗列出自己会时常阅读参考的资源，方便查阅和学习：\n\n- [阮一峰的JavaScript标准参考教程](http://javascript.ruanyifeng.com/)\n- [ECMAScript 5.1 Standard](http://barretlee.github.io/ST/ES5.1/)\n- [CSS参考手册](http://css.doyoe.com/)\n- [司徒正美的移动学习资料](https://github.com/RubyLouvre/mobileTech)\n\n\n###工具列表：\n\n- [caniuse.com](http://caniuse.com/)\n","updated":"2015-04-12T02:36:49.000Z","path":"resource/index.html","comments":1,"layout":"page","_id":"ci8hi8en100002sbe88e2s3o5"},{"title":"关于我","date":"2014-12-19T19:41:41.000Z","_content":"\n## 关于作者\n\n张梦雪(艺璇)，skylar.","source":"about/index.md","raw":"title: 关于我\ndate: 2014-12-20 03:41:41\n---\n\n## 关于作者\n\n张梦雪(艺璇)，skylar.","updated":"2015-04-12T02:36:49.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ci8hi8enh00012sbe4u6x3j7h"}],"Post":[{"title":"运算符中的一些小技巧","date":"2015-02-23T09:26:27.000Z","_content":"\n- 记下一些关于运算符的小技巧或容易出错的地方\n\n### %运算符\n------------------------------------------------------\n\n取余运算符运算结果的正负号由第一个运算子的正负号决定，比如：\n\n\t-1 % 2 // -1\n\t1 % -2 // 1\n\n所以有时候对负数取余会出现错误，使用绝对值函数可以避免错误：\n\n\t// 会出错\n\tfunction isOdd(n) {\n\t    return n % 2 === 1;\n\t}\n\tisOdd(-5) // false\n\tisOdd(-4) // false\n\n\t// 正确了\n\tfunction isOdd(n) {\n\t    return Math.abs(n % 2) === 1;\n\t}\n\tisOdd(-5) // true\n\tisOdd(-4) // false\n\n### +运算符\n-----------------------------------------------------------\n\n+运算符与其他运算符不太一样，我们知道它可以用来连接字符串操作，是因为用+运算符的时候它通常会将其他类型的值转为字符串，但是除了它比如说-运算符等都会将其他类型的值转换为数值，像这样：\n\n\tvar now = new Date();\n\ttypeof (now + 1) // \"string\"\n\ttypeof (now - 1) // \"number\"\n\n当运算子中出现对象的时候：\n\n\t1 + [1,2]\n\t// \"11,2\"\n\t1 + {a:1}\n\t// \"1[object Object]\"\n\n则先调用该对象的valueOf方法。如果返回结果为原始类型的值，则转换为字符串；否则继续调用该对象的toString方法，然后转换为字符串。\n但是：\n\n\t{a:1} + 1\n\t// 1\n\t({a:1})+1\n\t\"[object Object]1\"\n\n这是为什么呢？此时{a:1}被当做了代码块处理，而这个代码块没有返回值，所以整个表达式就返回1了。但是放在了圆括号中的{a:1}，因为js预期()中是一个值，所以它就又被当做对象处理了。\n\n**特殊表达式：**\n\n- 空数组+空数组\n\n先调用valueOf()返回空数组本身，再调用toString()，返回空字符串。\n\n\t[] + []\n\t// \"\"\n\n- 空数组+空对象\n\n[]得到''，{}得到\"[object Object]\"\n\n\t[] + {}\n\t// \"[object Object]\"\n\n- 空对象+空数组\n\n{}被视作代码块省略，+[]就是将[]转换为数值的意思了得到0.\n\n\t{} + []\n\t// 0\n\n- 空对象+空对象\n\n同样{}被当做代码块省略了，+{}转数值得到NaN\n\n\t{} + {}\n\t// NaN\n\n如果第一个空对象不被当做空代码块的话：\n\n\t({}) + {}\n\t// \"[object Object][object Object]\"\n\n\t({} + {})\n\t// \"[object Object][object Object]\"  \n\n\tconsole.log({} + {})\n\t// \"[object Object][object Object]\"\n\n\tvar a = {} + {};\n\ta\n\t// \"[object Object][object Object]\"\n\n此外，当+运算符作为数值运算符放在其他值前面的时候，可以用于将任何值转为数值，就像Number函数那样：\n\n\t+true // 1\n\t+[] // 0\n\t+{} // NaN\n\n\n\n### ！取反运算符\n----------------------------------------------------------\n\n！取反运算符连续对同一个值进行取反运算等于将其转换为对应的布尔值，就像Boolean函数那样：\n\n\t!!x\n\n\t// 等同于\n\n\tBoolean(x)\n\n此外，如果我们想排除null这个对象，可以这样写:\n\n\tif(!!x){\n\t\t//do something!\n\t}\n\n这是因为:!!null 值是 false，其他的 object !!obj 值都是 true。 \n\n### ~否运算符\n-------------------------------------------------------------\n\n~运算符是根据值的二进制二进制形式进行运算的。\n\n\t~ 3 // -4\n\n它的运算原理就是根据数值的32位二进制整数形式运算，补码存储的原理如果是负数，需要将取反后的值减一再取反然后加上负号。\n比较麻烦，但是我们可以记成一个值与它取反后的值相加等于-1.\n\n\t~~2.9\n\t// 2\n\n两次否运算能够对小数取整，并且这是取整方法中最快的一种。\n\n### ^异或运算符\n-------------------------------------------------------------\n\n两次异或运算交换两个数的值：\n\n\tvar a = 10;\n\tvar b = 99;\n\n\ta^=b, b^=a, a^=b;\n\n\ta // 99\n\tb // 10\n\n### << 左移运算符\n-------------------------------------------------------------\n\n左移0位可用于取整：\n\n\t13.5 << 0\n\t// 13\n\n\t-13.5 << 0\n\t// -13\n\n左移运算可以将颜色的RGB值转为HEX值：\n\n\tvar color = {r: 186, g: 218, b: 85};\n\n\t// RGB to HEX\n\tvar rgb2hex = function(r, g, b) {\n\t    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).substr(1);\n\t}\n\n\trgb2hex(color.r,color.g,color.b)\n\t// \"#bada55\"\n\n\n### >> 右移运算\n------------------------------------------------------------\n\n右移运算可以模拟2的整除运算：\n\n\t5 >> 1 \n\t// 相当于 5 / 2 = 2\n\n\t21 >> 2 \n\t// 相当于 21 / 4 = 5\n\n\t21 >> 3 \n\t// 相当于 21 / 8 = 2\n\n\t21 >> 4 \n\t// 相当于 21 / 16 = 1\n\n\n此外，void运算符的作用是用来执行一个表达式，然后返回undefined，而且它的运算符优先级也比较高void 4+7 实际上等同于 (void 4) +7。一般运算符是左结合的，但是=和三目运算符？：却是右结合的：\n\n\tw = x = y = z;\n\tq = a?b:c?d:e?f:g;\n\tw = (x = (y = z)); \n\tq = a?b:(c?d:(e?f:g));","source":"_posts/运算符.md","raw":"title: 运算符中的一些小技巧\ndate: 2015-02-23 17:26:27\ntags: \n- 实用小技巧\n---\n\n- 记下一些关于运算符的小技巧或容易出错的地方\n\n### %运算符\n------------------------------------------------------\n\n取余运算符运算结果的正负号由第一个运算子的正负号决定，比如：\n\n\t-1 % 2 // -1\n\t1 % -2 // 1\n\n所以有时候对负数取余会出现错误，使用绝对值函数可以避免错误：\n\n\t// 会出错\n\tfunction isOdd(n) {\n\t    return n % 2 === 1;\n\t}\n\tisOdd(-5) // false\n\tisOdd(-4) // false\n\n\t// 正确了\n\tfunction isOdd(n) {\n\t    return Math.abs(n % 2) === 1;\n\t}\n\tisOdd(-5) // true\n\tisOdd(-4) // false\n\n### +运算符\n-----------------------------------------------------------\n\n+运算符与其他运算符不太一样，我们知道它可以用来连接字符串操作，是因为用+运算符的时候它通常会将其他类型的值转为字符串，但是除了它比如说-运算符等都会将其他类型的值转换为数值，像这样：\n\n\tvar now = new Date();\n\ttypeof (now + 1) // \"string\"\n\ttypeof (now - 1) // \"number\"\n\n当运算子中出现对象的时候：\n\n\t1 + [1,2]\n\t// \"11,2\"\n\t1 + {a:1}\n\t// \"1[object Object]\"\n\n则先调用该对象的valueOf方法。如果返回结果为原始类型的值，则转换为字符串；否则继续调用该对象的toString方法，然后转换为字符串。\n但是：\n\n\t{a:1} + 1\n\t// 1\n\t({a:1})+1\n\t\"[object Object]1\"\n\n这是为什么呢？此时{a:1}被当做了代码块处理，而这个代码块没有返回值，所以整个表达式就返回1了。但是放在了圆括号中的{a:1}，因为js预期()中是一个值，所以它就又被当做对象处理了。\n\n**特殊表达式：**\n\n- 空数组+空数组\n\n先调用valueOf()返回空数组本身，再调用toString()，返回空字符串。\n\n\t[] + []\n\t// \"\"\n\n- 空数组+空对象\n\n[]得到''，{}得到\"[object Object]\"\n\n\t[] + {}\n\t// \"[object Object]\"\n\n- 空对象+空数组\n\n{}被视作代码块省略，+[]就是将[]转换为数值的意思了得到0.\n\n\t{} + []\n\t// 0\n\n- 空对象+空对象\n\n同样{}被当做代码块省略了，+{}转数值得到NaN\n\n\t{} + {}\n\t// NaN\n\n如果第一个空对象不被当做空代码块的话：\n\n\t({}) + {}\n\t// \"[object Object][object Object]\"\n\n\t({} + {})\n\t// \"[object Object][object Object]\"  \n\n\tconsole.log({} + {})\n\t// \"[object Object][object Object]\"\n\n\tvar a = {} + {};\n\ta\n\t// \"[object Object][object Object]\"\n\n此外，当+运算符作为数值运算符放在其他值前面的时候，可以用于将任何值转为数值，就像Number函数那样：\n\n\t+true // 1\n\t+[] // 0\n\t+{} // NaN\n\n\n\n### ！取反运算符\n----------------------------------------------------------\n\n！取反运算符连续对同一个值进行取反运算等于将其转换为对应的布尔值，就像Boolean函数那样：\n\n\t!!x\n\n\t// 等同于\n\n\tBoolean(x)\n\n此外，如果我们想排除null这个对象，可以这样写:\n\n\tif(!!x){\n\t\t//do something!\n\t}\n\n这是因为:!!null 值是 false，其他的 object !!obj 值都是 true。 \n\n### ~否运算符\n-------------------------------------------------------------\n\n~运算符是根据值的二进制二进制形式进行运算的。\n\n\t~ 3 // -4\n\n它的运算原理就是根据数值的32位二进制整数形式运算，补码存储的原理如果是负数，需要将取反后的值减一再取反然后加上负号。\n比较麻烦，但是我们可以记成一个值与它取反后的值相加等于-1.\n\n\t~~2.9\n\t// 2\n\n两次否运算能够对小数取整，并且这是取整方法中最快的一种。\n\n### ^异或运算符\n-------------------------------------------------------------\n\n两次异或运算交换两个数的值：\n\n\tvar a = 10;\n\tvar b = 99;\n\n\ta^=b, b^=a, a^=b;\n\n\ta // 99\n\tb // 10\n\n### << 左移运算符\n-------------------------------------------------------------\n\n左移0位可用于取整：\n\n\t13.5 << 0\n\t// 13\n\n\t-13.5 << 0\n\t// -13\n\n左移运算可以将颜色的RGB值转为HEX值：\n\n\tvar color = {r: 186, g: 218, b: 85};\n\n\t// RGB to HEX\n\tvar rgb2hex = function(r, g, b) {\n\t    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).substr(1);\n\t}\n\n\trgb2hex(color.r,color.g,color.b)\n\t// \"#bada55\"\n\n\n### >> 右移运算\n------------------------------------------------------------\n\n右移运算可以模拟2的整除运算：\n\n\t5 >> 1 \n\t// 相当于 5 / 2 = 2\n\n\t21 >> 2 \n\t// 相当于 21 / 4 = 5\n\n\t21 >> 3 \n\t// 相当于 21 / 8 = 2\n\n\t21 >> 4 \n\t// 相当于 21 / 16 = 1\n\n\n此外，void运算符的作用是用来执行一个表达式，然后返回undefined，而且它的运算符优先级也比较高void 4+7 实际上等同于 (void 4) +7。一般运算符是左结合的，但是=和三目运算符？：却是右结合的：\n\n\tw = x = y = z;\n\tq = a?b:c?d:e?f:g;\n\tw = (x = (y = z)); \n\tq = a?b:(c?d:(e?f:g));","slug":"运算符","published":1,"updated":"2015-04-12T02:36:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8hi8env00022sbefkiv0dst"},{"title":"关于JSON对象的兼容性和一些小问题","date":"2015-03-16T13:52:25.000Z","_content":"\n### 一、JSON对象的一些方法\n\n+ JSON.parse()解析JSON字符串返回解析后的JSON对象;\n+ JSON.stringify()返回指定JSON对象的字符串形式;\n\n### 二、JSON对象的兼容性问题\n\nIE8+才会支持JSON对象。我们可以通过代码自己模拟原生的JSON对象：[模拟原生JSON对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON)\n\n**[eval和new Function]**\n\n看模拟原生JSON对象的实现我们可以看到实现思路：\n\n\teval(str)\n\t(new Function('return'+str))()\n\n当我们实际的操作一下，还是会有些小问题的.\n\n### 三、一些小问题：\n\n(1)利用eval()函数解析JSON对象：\n\n\t// SyntaxError: Unexpected token :\n\teval('{\"name\":\"skylar\"}') \n\n\n这是为什么呢？其实是{}做的怪。{}的用处无非两个，（1）用于创建对象；（2）创建代码块，并且当{}位于语句的开头时，代码就会被当成代码块来解析。这里eval()中明显就是把对象当成代码块来解析了，所以就报错了。\n\n解决方法：\n\n\t// {\"name\": \"skylar\"}并且注意JSON中的key和value要使用双引号，避免出错\n\teval(\"(\" + str + \")\");\n\t//或\n\teval('0,' + str);\n\n\n(2)JSON.parse()不允许逗号结尾：\n\n\t// both will throw a SyntaxError\n\tJSON.parse(\"[1, 2, 3, 4, ]\");\n\tJSON.parse(\"{ \\\"foo\\\" : 1, }\");\n\n\n### 四、参考资料：\n\n[JSON.stringify](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n\n[JSON.parse](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\n\n[JSON对象](http://javascript.ruanyifeng.com/stdlib/json.html)\n\n\n\n","source":"_posts/关于JSON对象的兼容性和一些小问题.md","raw":"title: 关于JSON对象的兼容性和一些小问题\ndate: 2015-03-16 21:52:25\ntags: \n- 实用小技巧\n---\n\n### 一、JSON对象的一些方法\n\n+ JSON.parse()解析JSON字符串返回解析后的JSON对象;\n+ JSON.stringify()返回指定JSON对象的字符串形式;\n\n### 二、JSON对象的兼容性问题\n\nIE8+才会支持JSON对象。我们可以通过代码自己模拟原生的JSON对象：[模拟原生JSON对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON)\n\n**[eval和new Function]**\n\n看模拟原生JSON对象的实现我们可以看到实现思路：\n\n\teval(str)\n\t(new Function('return'+str))()\n\n当我们实际的操作一下，还是会有些小问题的.\n\n### 三、一些小问题：\n\n(1)利用eval()函数解析JSON对象：\n\n\t// SyntaxError: Unexpected token :\n\teval('{\"name\":\"skylar\"}') \n\n\n这是为什么呢？其实是{}做的怪。{}的用处无非两个，（1）用于创建对象；（2）创建代码块，并且当{}位于语句的开头时，代码就会被当成代码块来解析。这里eval()中明显就是把对象当成代码块来解析了，所以就报错了。\n\n解决方法：\n\n\t// {\"name\": \"skylar\"}并且注意JSON中的key和value要使用双引号，避免出错\n\teval(\"(\" + str + \")\");\n\t//或\n\teval('0,' + str);\n\n\n(2)JSON.parse()不允许逗号结尾：\n\n\t// both will throw a SyntaxError\n\tJSON.parse(\"[1, 2, 3, 4, ]\");\n\tJSON.parse(\"{ \\\"foo\\\" : 1, }\");\n\n\n### 四、参考资料：\n\n[JSON.stringify](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n\n[JSON.parse](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\n\n[JSON对象](http://javascript.ruanyifeng.com/stdlib/json.html)\n\n\n\n","slug":"关于JSON对象的兼容性和一些小问题","published":1,"updated":"2015-04-12T03:43:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8hi8eo200052sbe6tdtwomb"},{"title":"跨终端开发必备概念汇总","date":"2015-01-20T15:03:17.000Z","_content":"\n移动大潮已然到来，跟上节奏是必须。在进行更进一步深入学习和研究各种相关问题之前，有些概念是必须研究透彻的，这将会是以后开发和适配的基石。 \n\n## 文章导读\n\t一.单位英寸像素数（Pixel Per Inch，PPI）\n\t二.设备像素比率（Device Pixel Ratio，DPR）\n\t三.设备像素/css像素\n\t四.各路单位扫盲＋分析\n\t五.viewport相关\n\t六.width和device－width\n\n## 一.单位英寸像素数（Pixel Per Inch，PPI）\n\nPPI是一个度量单位，是像素密度单位，它表示了现实世界一英寸内的像素数，因此它决定了屏幕的显示质量。\n\n像我们常说的1024*768其实是指的屏幕分辨率，对应在现实中的分辨率就用PPI作为度量单位，可以举个例子来说明：\n\n　　｜－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－｜\n\n　　｜如果显示器的屏幕大小是14英寸（对角线的长度）纵横比是3:4－－>\n\n　　｜那么水平方向上的长度就为：14*（4/5）＝11.2 英寸  （1英寸＝0.762寸）\n\n　　｜从而我们常说的1024对应现实世界的分辨率就为：1024/11.2 ＝ 91.4PPI\n\n　　｜－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－｜\n\n所以通常要分辨清楚，像我们说的1024*768和iPhone5s的640*1136他们不是对应PPI这个单位的。\n\n正是因为不相同，存在这样的对应关系，所以在终端上必要的时候就会做PPI的适配，以Retina屏为例子：\n\n－－>我们不想文字在Retina屏上变小（因为在相同尺寸的屏幕下，Retina屏拥有比非Retina屏更多的物理像素，就是我们现实世界中的像素数，所以相同大小的字在Retina下会变小），所以为了做适配，我们可以采用类似媒体查询的办法来改变字体的大小。\n\n　　｜－PS－｜：Retina显示屏\n\n　　　　定义：就是具备足够高像素密度而使到人体肉眼无法分辨其中单独像素点的液晶屏，就像最早的iPhone4的屏幕。它的屏幕分辨率为960×640（每英寸像素数326ppi）。\n\n　　　　我觉得最大的区别就是：因为我们看到的图像都是通过物理像素呈现的，所以像素越密集图像就越清晰，而所谓的Retina显示屏就是在相同尺寸的屏幕下比非Retina的屏幕具备更多的物理像素。\n\n##二.设备像素比率（Device Pixel Ratio，DPR）\n\n定义：\n\n　　　　devicePixelRatio指的是window.devicePixelRatio, 被所有WebKit浏览器以及Opera所支持，window.devicePixelRatio是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例，即：devicePixelRatio=设备物理像素/设备独立像素。\n\n　　　　它表示的就是物理像素与逻辑像素（px）的对应关系。\n\n举个例子：　　　　\n\n　　　　以iPhone为例，retina下devicePixelRatio=1，非retina下devicePixelRatio=2，这是因为无论是retina还是非retina屏，竖屏下，设备独立像素都是320，而它们的设备物理像素分别为640、320。\n\n　　这边还有更加详细的相关阅读：[设备像素比devicePixelRatio的简单介绍](http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/)  [devicePixelRatio＝1.5引发的问题](https://www.imququ.com/post/devicepixelratio-and-border-width.html) \n\n　　于是也就有了DPR适配的问题，因为存在设备像素比率这个东西，所以当我们遇到那个经典的1px问题（无非就是设计师希望在任何的屏幕上都有一条1物理像素的边），要做的就多了。\n\n　　[手机淘宝的flexible设计与实现](http://www.html-js.com/article/2402)\n\n## 三.设备像素/css像素\n\n要先说下分辨率（Resolution），它就是指屏幕区域的宽高所占的像素数。分辨率说全了就是设备的分辨率，这两个是一回事。这个分辨率是指每英寸的面积上可产生的像素点，分辨率越高代表可以将画面显示的更精细（有时候获取的显示器分辨率，其实是指桌面设定的分辨率，而不是显示器的物理分辨率。大多数情况下，我们设置的分辨率与物理分辨率一致，显示效果才最佳）。\n\n其实这里说的分辨率（Resolution）在绝大多数的情况下跟我们题目上的设备像素是一个东西，名字的不同而已。\n\n　　好，下面就专心说设备像素/css像素。\n\n　　1.我们姑且认定设备的pixels为正确（标准）的pixels宽度。这些pixels决定了你工作所用的那些设备上正式的分辨率。在大多数情况下，能够从screen.width/height上取出具体值；\n\n　　2.现代浏览器上的缩放，是基于“伸展”pixels。结果是，html元素上的宽度并没有因为缩放200%而由128pix变成256px，而是真实的pixels的被计算成了双倍。html元素在形式上依然是128CSS的pixels，即便它占用了256设备的pixels；\n\n　　3.图例：\n\n　　下列图片将清楚的解释这个概念。如图,有4个1像素，缩放为100%的html元素，CSS的pixels完整的和设备的pixels重叠\n\n![图1](/img/1.png) \n\n　　当我们缩小浏览器时，CSS的pixels开始收缩，导致1单位的设备的pixels上重叠了多个CSS的pixels，如下图:\n\n![图2](/img/2.png) \n\n　　同理，放大浏览器时，相反的事情发生了，CSS的pixels开始扩大，导致1单位的CSS的pixels上重叠了多个设备的pixels，如下图：　　　　　\n\n![图3](/img/3.png) \n\n　　4.总体而言，你只需要关注CSS的pixels，这些pixels指定你的样式被如何渲染，设备的pixels几乎对你毫无用处。但对用户而言却不是这样。用户会缩放页面，直到他能舒服的阅读内容。但是你不需关心这些缩放级别。浏览器会自动的保证你的CSS的pixels会被伸展还是收缩；\n\n　　5.在缩放级别为100%时，1单位的CSS的pixel是严格相等于1单位的设备pixel。\n\n　　6.上面有说道，页面的清晰和模糊其实可以通过设备像素和css像素的关系来解释。那么这里也要注意下Retina屏，不然稍不注意，图可能会糊掉。\n\n　　　　非retina屏下，一个css像素“覆盖”在一个设备物理像素上；\n　　　　retina屏下，一个css像素“覆盖”在四个设备物理像素上，实质是一个css像素被瓜分成了四份，效果就变糊了。\n\n　　　　原理就像下面这样：\n\n![图4](/img/4.png)\n\n## 四.各路单位扫盲＋分析\n\n　1.em\n\n　　　　em是相对单位，参考物是父元素的font-size，同百分比方式的单位相同，具有继承的特点，如果字体大小是16px（浏览器的默认值），那么 1em = 16px。 如果父元素设置了font-size:62.5%，那么相应的1em=10px了。\n\n　　　　这里有篇文章研究的比较仔细：[关于webapp中的文字单位的一些倒腾](http://www.html-js.com/article/2400)\n\n　　2.rem\n\n　　　　rem也是相对单位，不过总是相对于根元素的字体大小，也就是<html>元素。\n\n　　　　现在越来越多的人采用rem在不同的设备间进行布局了，可以通过js动态的改变<html>元素的font-size，或是通过媒体查询来动态改变<HTML>元素的font-size的大小，来适配不同设备的不同屏幕大小，实现跨终端的目的，而且支持度也越来越好了。\n\n　　3.vw和vh\n\n　　　   vw Viewport宽度， ** 1vw ** 等于viewport宽度的1%；\n\n　　　　vh Viewport高度， ** 1vh ** 等于viewport高的的1%；\n\n　　4.vmin和vmax\n\n　　　　vw和vh对应于viewport的width和height，而vmin和vmax分别对应于width、height中的最小值和最大值，例如如果浏览器的宽/高被设置为1000px/600px，那么\n\n　　　　1vmin = 600 * 1/100;\n\n　　　　1vmax = 1000 * 1/100\n\n \n\n[MSDN上有更为详尽的解释](http://msdn.microsoft.com/en-us/magazine/jj687762.aspx) \n\n## 五.viewport相关\n\n｜－视口viewport（这里且先说pc相关的viewport）－｜\n\n　　viewport的定义是严格的等于浏览器的窗口，它不是一个HTML的概念，所以我们不能通过css去修改它。\n\n　　实际上，viewport的功能在于控制网站的最高block容器，那就是<html>元素。也就是说<html>元素为viewport宽度的100%。虽然我们知道document.documentElement实际上就是<html>元素，但是document.documentElement. clientWidth/Height给出的实际是viewport的尺寸，而不是<html>元素，不管<html>元素的尺寸如何改变，都只会得到viewport的尺寸。那我们该如何获取<html>元素的尺寸呢，可以使用document.documentElement.offsetWidth/Height，但还是有bug，IE用这个值标示viewport的尺寸而非<html> 。\n\n｜－viewport（然后放开了的说下我学习和理解到的跨终端相关的viewport）－｜\n\n1.两种viewport：\n\n　　　　虚拟的viewport＃visualviewport －－visualviewport是当前显示在屏幕上的部分页面。用户会滚动页面来改变可见部分，或者缩放浏览器来改变visualviewport的尺寸。window.innerWidth/Height返回visualviewport的尺寸。\n\n![图5](/img/5.png)\n\n　　　　布局的viewport＃layoutviewport－－css布局通常都是按照layoutviewport来定义，而且比visualviewport宽很多。同时<html>元素的宽度也是继承于layoutviewport。那么layoutviewport有多宽呢？每个浏览器都不同。iPhone上的Safari使用980px、Opera 850px，安卓的Webkit核心800px，IE974px。浏览器已经选择好他们的layoutviewport的尺寸，它完整的覆盖了最小缩放模式下的移动浏览器的屏幕。document.documentElement.clientWidth/Height传递layoutviewport的尺寸。\n\n \n![图6](/img/6.png)\n　　\n\n2.和pc浏览器一样，screen.width/height标示了设备屏幕的尺寸，以设备的pixels度量。如果需要知道当前visualviewport相对于layoutviewport的距离。这就是滚动位移，如同在桌面浏览器一样，使用window.pageX/YOffset存储。和在桌面系统一样,document.documentElement.offsetWidth/Height给出了<html>元素以CSS的pixels度量的尺寸。\n\n　　上面内容只是基本，并不完整，不同浏览器的兼容问题还需要进一步研究，详细阅读请看：[A Table of two viewports－part one](http://www.quirksmode.org/mobile/viewports.html)       当然第二部分也非常值得一看： [A Table of two viewports－part two](http://www.quirksmode.org/mobile/viewports2.html)　\n\n　　quirksmode上的一个非常全的viewport相关的兼容性表，可用于适配时查看：[http://www.quirksmode.org/mobile/tableViewport.html](http://www.quirksmode.org/mobile/tableViewport.html)\n\n　　其中涉及到的页面元素大小偏移相关我之前也有整理,没那么深入，倒也通俗易懂： 页面元素坐标和偏移相关整理 \n\n## 六.width和device－width\n\n我了解到的定义是：\n\n　　　　+－－width/height使用以CSS的pixels度量的layoutviewport，通俗的说就是页面内容的宽度；\n\n　　　　+－－device-width/height使用以设备的pixels度量的设备屏幕（device screen）；\n\n　　　　#－－width/height 反映document. documentElement. clientWidth/Height的值；\n\n　　　　#－－device-width/height 反映screen.width/height；\n\n　　　　但上面只是普遍情况，如果稍在ios设备下尝试下，就能发现事实跟上面说的不一样。\n\n　　　　在某些设备下：screen.width == 设备的物理分辨率 / window.devicePixelRatio。具体情况还需要详细的测试。\n\n \n\n上面也还只是列出了相关问题的基本了解与学习，在这个过程中更加发现，需要深入研究与学习的知识点还是很多的。\n\n比如说<META>标签相关，还有1px的问题，都是值得深入学习的。\n\n后续继续持续学习，逐步完善。\n　 ","source":"_posts/mobile.md","raw":"title: 跨终端开发必备概念汇总\ndate: 2015-01-20 23:03:17\ncategories: \n- 文章\ntags: \n- 博客\n---\n\n移动大潮已然到来，跟上节奏是必须。在进行更进一步深入学习和研究各种相关问题之前，有些概念是必须研究透彻的，这将会是以后开发和适配的基石。 \n\n## 文章导读\n\t一.单位英寸像素数（Pixel Per Inch，PPI）\n\t二.设备像素比率（Device Pixel Ratio，DPR）\n\t三.设备像素/css像素\n\t四.各路单位扫盲＋分析\n\t五.viewport相关\n\t六.width和device－width\n\n## 一.单位英寸像素数（Pixel Per Inch，PPI）\n\nPPI是一个度量单位，是像素密度单位，它表示了现实世界一英寸内的像素数，因此它决定了屏幕的显示质量。\n\n像我们常说的1024*768其实是指的屏幕分辨率，对应在现实中的分辨率就用PPI作为度量单位，可以举个例子来说明：\n\n　　｜－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－｜\n\n　　｜如果显示器的屏幕大小是14英寸（对角线的长度）纵横比是3:4－－>\n\n　　｜那么水平方向上的长度就为：14*（4/5）＝11.2 英寸  （1英寸＝0.762寸）\n\n　　｜从而我们常说的1024对应现实世界的分辨率就为：1024/11.2 ＝ 91.4PPI\n\n　　｜－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－｜\n\n所以通常要分辨清楚，像我们说的1024*768和iPhone5s的640*1136他们不是对应PPI这个单位的。\n\n正是因为不相同，存在这样的对应关系，所以在终端上必要的时候就会做PPI的适配，以Retina屏为例子：\n\n－－>我们不想文字在Retina屏上变小（因为在相同尺寸的屏幕下，Retina屏拥有比非Retina屏更多的物理像素，就是我们现实世界中的像素数，所以相同大小的字在Retina下会变小），所以为了做适配，我们可以采用类似媒体查询的办法来改变字体的大小。\n\n　　｜－PS－｜：Retina显示屏\n\n　　　　定义：就是具备足够高像素密度而使到人体肉眼无法分辨其中单独像素点的液晶屏，就像最早的iPhone4的屏幕。它的屏幕分辨率为960×640（每英寸像素数326ppi）。\n\n　　　　我觉得最大的区别就是：因为我们看到的图像都是通过物理像素呈现的，所以像素越密集图像就越清晰，而所谓的Retina显示屏就是在相同尺寸的屏幕下比非Retina的屏幕具备更多的物理像素。\n\n##二.设备像素比率（Device Pixel Ratio，DPR）\n\n定义：\n\n　　　　devicePixelRatio指的是window.devicePixelRatio, 被所有WebKit浏览器以及Opera所支持，window.devicePixelRatio是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例，即：devicePixelRatio=设备物理像素/设备独立像素。\n\n　　　　它表示的就是物理像素与逻辑像素（px）的对应关系。\n\n举个例子：　　　　\n\n　　　　以iPhone为例，retina下devicePixelRatio=1，非retina下devicePixelRatio=2，这是因为无论是retina还是非retina屏，竖屏下，设备独立像素都是320，而它们的设备物理像素分别为640、320。\n\n　　这边还有更加详细的相关阅读：[设备像素比devicePixelRatio的简单介绍](http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/)  [devicePixelRatio＝1.5引发的问题](https://www.imququ.com/post/devicepixelratio-and-border-width.html) \n\n　　于是也就有了DPR适配的问题，因为存在设备像素比率这个东西，所以当我们遇到那个经典的1px问题（无非就是设计师希望在任何的屏幕上都有一条1物理像素的边），要做的就多了。\n\n　　[手机淘宝的flexible设计与实现](http://www.html-js.com/article/2402)\n\n## 三.设备像素/css像素\n\n要先说下分辨率（Resolution），它就是指屏幕区域的宽高所占的像素数。分辨率说全了就是设备的分辨率，这两个是一回事。这个分辨率是指每英寸的面积上可产生的像素点，分辨率越高代表可以将画面显示的更精细（有时候获取的显示器分辨率，其实是指桌面设定的分辨率，而不是显示器的物理分辨率。大多数情况下，我们设置的分辨率与物理分辨率一致，显示效果才最佳）。\n\n其实这里说的分辨率（Resolution）在绝大多数的情况下跟我们题目上的设备像素是一个东西，名字的不同而已。\n\n　　好，下面就专心说设备像素/css像素。\n\n　　1.我们姑且认定设备的pixels为正确（标准）的pixels宽度。这些pixels决定了你工作所用的那些设备上正式的分辨率。在大多数情况下，能够从screen.width/height上取出具体值；\n\n　　2.现代浏览器上的缩放，是基于“伸展”pixels。结果是，html元素上的宽度并没有因为缩放200%而由128pix变成256px，而是真实的pixels的被计算成了双倍。html元素在形式上依然是128CSS的pixels，即便它占用了256设备的pixels；\n\n　　3.图例：\n\n　　下列图片将清楚的解释这个概念。如图,有4个1像素，缩放为100%的html元素，CSS的pixels完整的和设备的pixels重叠\n\n![图1](/img/1.png) \n\n　　当我们缩小浏览器时，CSS的pixels开始收缩，导致1单位的设备的pixels上重叠了多个CSS的pixels，如下图:\n\n![图2](/img/2.png) \n\n　　同理，放大浏览器时，相反的事情发生了，CSS的pixels开始扩大，导致1单位的CSS的pixels上重叠了多个设备的pixels，如下图：　　　　　\n\n![图3](/img/3.png) \n\n　　4.总体而言，你只需要关注CSS的pixels，这些pixels指定你的样式被如何渲染，设备的pixels几乎对你毫无用处。但对用户而言却不是这样。用户会缩放页面，直到他能舒服的阅读内容。但是你不需关心这些缩放级别。浏览器会自动的保证你的CSS的pixels会被伸展还是收缩；\n\n　　5.在缩放级别为100%时，1单位的CSS的pixel是严格相等于1单位的设备pixel。\n\n　　6.上面有说道，页面的清晰和模糊其实可以通过设备像素和css像素的关系来解释。那么这里也要注意下Retina屏，不然稍不注意，图可能会糊掉。\n\n　　　　非retina屏下，一个css像素“覆盖”在一个设备物理像素上；\n　　　　retina屏下，一个css像素“覆盖”在四个设备物理像素上，实质是一个css像素被瓜分成了四份，效果就变糊了。\n\n　　　　原理就像下面这样：\n\n![图4](/img/4.png)\n\n## 四.各路单位扫盲＋分析\n\n　1.em\n\n　　　　em是相对单位，参考物是父元素的font-size，同百分比方式的单位相同，具有继承的特点，如果字体大小是16px（浏览器的默认值），那么 1em = 16px。 如果父元素设置了font-size:62.5%，那么相应的1em=10px了。\n\n　　　　这里有篇文章研究的比较仔细：[关于webapp中的文字单位的一些倒腾](http://www.html-js.com/article/2400)\n\n　　2.rem\n\n　　　　rem也是相对单位，不过总是相对于根元素的字体大小，也就是<html>元素。\n\n　　　　现在越来越多的人采用rem在不同的设备间进行布局了，可以通过js动态的改变<html>元素的font-size，或是通过媒体查询来动态改变<HTML>元素的font-size的大小，来适配不同设备的不同屏幕大小，实现跨终端的目的，而且支持度也越来越好了。\n\n　　3.vw和vh\n\n　　　   vw Viewport宽度， ** 1vw ** 等于viewport宽度的1%；\n\n　　　　vh Viewport高度， ** 1vh ** 等于viewport高的的1%；\n\n　　4.vmin和vmax\n\n　　　　vw和vh对应于viewport的width和height，而vmin和vmax分别对应于width、height中的最小值和最大值，例如如果浏览器的宽/高被设置为1000px/600px，那么\n\n　　　　1vmin = 600 * 1/100;\n\n　　　　1vmax = 1000 * 1/100\n\n \n\n[MSDN上有更为详尽的解释](http://msdn.microsoft.com/en-us/magazine/jj687762.aspx) \n\n## 五.viewport相关\n\n｜－视口viewport（这里且先说pc相关的viewport）－｜\n\n　　viewport的定义是严格的等于浏览器的窗口，它不是一个HTML的概念，所以我们不能通过css去修改它。\n\n　　实际上，viewport的功能在于控制网站的最高block容器，那就是<html>元素。也就是说<html>元素为viewport宽度的100%。虽然我们知道document.documentElement实际上就是<html>元素，但是document.documentElement. clientWidth/Height给出的实际是viewport的尺寸，而不是<html>元素，不管<html>元素的尺寸如何改变，都只会得到viewport的尺寸。那我们该如何获取<html>元素的尺寸呢，可以使用document.documentElement.offsetWidth/Height，但还是有bug，IE用这个值标示viewport的尺寸而非<html> 。\n\n｜－viewport（然后放开了的说下我学习和理解到的跨终端相关的viewport）－｜\n\n1.两种viewport：\n\n　　　　虚拟的viewport＃visualviewport －－visualviewport是当前显示在屏幕上的部分页面。用户会滚动页面来改变可见部分，或者缩放浏览器来改变visualviewport的尺寸。window.innerWidth/Height返回visualviewport的尺寸。\n\n![图5](/img/5.png)\n\n　　　　布局的viewport＃layoutviewport－－css布局通常都是按照layoutviewport来定义，而且比visualviewport宽很多。同时<html>元素的宽度也是继承于layoutviewport。那么layoutviewport有多宽呢？每个浏览器都不同。iPhone上的Safari使用980px、Opera 850px，安卓的Webkit核心800px，IE974px。浏览器已经选择好他们的layoutviewport的尺寸，它完整的覆盖了最小缩放模式下的移动浏览器的屏幕。document.documentElement.clientWidth/Height传递layoutviewport的尺寸。\n\n \n![图6](/img/6.png)\n　　\n\n2.和pc浏览器一样，screen.width/height标示了设备屏幕的尺寸，以设备的pixels度量。如果需要知道当前visualviewport相对于layoutviewport的距离。这就是滚动位移，如同在桌面浏览器一样，使用window.pageX/YOffset存储。和在桌面系统一样,document.documentElement.offsetWidth/Height给出了<html>元素以CSS的pixels度量的尺寸。\n\n　　上面内容只是基本，并不完整，不同浏览器的兼容问题还需要进一步研究，详细阅读请看：[A Table of two viewports－part one](http://www.quirksmode.org/mobile/viewports.html)       当然第二部分也非常值得一看： [A Table of two viewports－part two](http://www.quirksmode.org/mobile/viewports2.html)　\n\n　　quirksmode上的一个非常全的viewport相关的兼容性表，可用于适配时查看：[http://www.quirksmode.org/mobile/tableViewport.html](http://www.quirksmode.org/mobile/tableViewport.html)\n\n　　其中涉及到的页面元素大小偏移相关我之前也有整理,没那么深入，倒也通俗易懂： 页面元素坐标和偏移相关整理 \n\n## 六.width和device－width\n\n我了解到的定义是：\n\n　　　　+－－width/height使用以CSS的pixels度量的layoutviewport，通俗的说就是页面内容的宽度；\n\n　　　　+－－device-width/height使用以设备的pixels度量的设备屏幕（device screen）；\n\n　　　　#－－width/height 反映document. documentElement. clientWidth/Height的值；\n\n　　　　#－－device-width/height 反映screen.width/height；\n\n　　　　但上面只是普遍情况，如果稍在ios设备下尝试下，就能发现事实跟上面说的不一样。\n\n　　　　在某些设备下：screen.width == 设备的物理分辨率 / window.devicePixelRatio。具体情况还需要详细的测试。\n\n \n\n上面也还只是列出了相关问题的基本了解与学习，在这个过程中更加发现，需要深入研究与学习的知识点还是很多的。\n\n比如说<META>标签相关，还有1px的问题，都是值得深入学习的。\n\n后续继续持续学习，逐步完善。\n　 ","slug":"mobile","published":1,"updated":"2015-04-12T02:36:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8hi8eo300072sbey5fc7y9o"},{"title":"关于博客主题以及HEXO的使用","_content":"\n博客使用 [Hexo](http://hexo.io/) 搭建的，他相关的文档介绍在这里 [DOC](http://hexo.io/docs/)。\n\n## 一、下载代码\n\n现在自己的 github 下新建一个叫做 blog 的仓库。然后到本地找个目录：\n\n### 新建文件夹\n\n    mkdir skylarBlog\n    cd skylarBlog\n\n### fork 代码\n\n    # 初始化\n    git init\n    # 添加源\n    git remote add barret https://github.com/barretlee/skylarblog.git\n    # 拉取代码，记得要加 barret\n    git pull barret\n\n### 切换分支\n\n    # 切换主干代码\n    git checkout master\n\n## 二、安装 hexo 及相关插件\n\n### 第一步先安装 hexo：\n\n    # (mac/linux)下使用 sudo安装\n    npm install -g hexo \n    # 初始化一个 hexo 项目\n    hexo init  \n\n给博客安装 5 个插件：\n\n- hexo-generator-feed    \n- hexo-renderer-ejs      \n- hexo-renderer-stylus\n- hexo-generator-sitemap \n- hexo-renderer-marked\n\n写在 `package.json` 文件中，通过 `npm install` 即可安装。\n\n### 安装组件\n\n    # 运行插件安装命令\n    npm install\n    简写： npm i\n\n\n## 三、文件目录及配置\n\n    ├── _config.yml       # 配置文件\n    ├── package.json      # npm 配置文件\n    ├── public            # 别鸟他\n    ├── scaffolds         # 别鸟他\n    ├── source            # 文章全部在这里\n    │   ├── CNAME         # 用于配置域名\n    │   ├── _posts        # 文章内容（文件夹）\n    │   └── about         # 可直接访问的页面\n    └── themes            # 主题，可在 _config.yml 中配置主题类型\n        ├── jacman\n        └── landscape\n\n配置 _config.yml，在最后找到：\n\n    deploy:\n      type: github\n      repository: https://github.com/barretlee/skylarblog.git\n      branch: gh-pages   \n\n将 repository 改成你自己的地址，`https://github.com/zhangmengxue/blog.git`\n\n目前在 master 分支下操作，执行下面的命令之后，会在 github 上自动生成一个 gh-pages 分支，这个分支不用理会，它是自动生成的。只需要在这个分支下开发。\n\n## 四、快速指南\n\n### 编译\n\n    $ hexo generate\n    简写：hexo g\n\n编辑的文档使用的 md 语法，使用 `hexo g` 将 md 文件编译成 html 文件，然后执行 `hexo s`就可以在本地预览了。\n\n更多信息: [Generating](http://hexo.io/docs/generating.html)\n\n### 启动本地服务器\n\n    $ hexo server\n    简写：hexo s\n\n会开启一个端口为 4000 的本地服务器，可以用于本地调试\n\n更多信息: [Server](http://hexo.io/docs/server.html)\n\n### 直接将代码部署到 Github Pages\n\n    $ hexo deploy\n    简写： hexo d\n\n更多信息: [Deployment](http://hexo.io/docs/deployment.html)\n\n### 组合命令\n\n    # 编译之后，打开本地服务器\n    hexo s -g\n    # 编译之后，直接发布到 Github Pages\n    hexo d -g\n\n\n## 五、发表文章\n\n### 创建一篇新的文章\n\n    $ hexo new post-name\n    简写：hexo n post-name\n\n这句命令会在 source/_posts 下生成一个叫做 post-name.md 的文件，然后通过 `hexo d -g`，打开本地服务器查看网页内容。\n\n### 创建一个页面\n\n    hexo new page about\n    简写：hexo n page about\n\n这条命令就可以生成一个 about 页面。\n\n更多信息: [Writing](http://hexo.io/docs/writing.html)\n\n### 把修改保存到自己的 github 上\n\n    # 添加自己的仓库源\n    git remote add skylar https://github.com/zhangmengxue/blog.git\n    # 推上去\n    git push skylar master\n    ## 这里需要注意的是，不需要管 gh-pages 分支，这个分支已经被 hexo 自动推送了\n\n\n## 六、其他方面的介绍\n\n在 themes/jacman 中可以配置页面信息，css 采用 stylus 写的，博客信息的配置也可在 `themes/jacman/_config.yml` 中修改。\n\n如果需要修改文件内容，建议直接在全局搜索关键词。\n\n","source":"_posts/hei-hexo.md","raw":"title: 关于博客主题以及HEXO的使用\ncategories: \n- 文章\ntags: \n- 博客\n---\n\n博客使用 [Hexo](http://hexo.io/) 搭建的，他相关的文档介绍在这里 [DOC](http://hexo.io/docs/)。\n\n## 一、下载代码\n\n现在自己的 github 下新建一个叫做 blog 的仓库。然后到本地找个目录：\n\n### 新建文件夹\n\n    mkdir skylarBlog\n    cd skylarBlog\n\n### fork 代码\n\n    # 初始化\n    git init\n    # 添加源\n    git remote add barret https://github.com/barretlee/skylarblog.git\n    # 拉取代码，记得要加 barret\n    git pull barret\n\n### 切换分支\n\n    # 切换主干代码\n    git checkout master\n\n## 二、安装 hexo 及相关插件\n\n### 第一步先安装 hexo：\n\n    # (mac/linux)下使用 sudo安装\n    npm install -g hexo \n    # 初始化一个 hexo 项目\n    hexo init  \n\n给博客安装 5 个插件：\n\n- hexo-generator-feed    \n- hexo-renderer-ejs      \n- hexo-renderer-stylus\n- hexo-generator-sitemap \n- hexo-renderer-marked\n\n写在 `package.json` 文件中，通过 `npm install` 即可安装。\n\n### 安装组件\n\n    # 运行插件安装命令\n    npm install\n    简写： npm i\n\n\n## 三、文件目录及配置\n\n    ├── _config.yml       # 配置文件\n    ├── package.json      # npm 配置文件\n    ├── public            # 别鸟他\n    ├── scaffolds         # 别鸟他\n    ├── source            # 文章全部在这里\n    │   ├── CNAME         # 用于配置域名\n    │   ├── _posts        # 文章内容（文件夹）\n    │   └── about         # 可直接访问的页面\n    └── themes            # 主题，可在 _config.yml 中配置主题类型\n        ├── jacman\n        └── landscape\n\n配置 _config.yml，在最后找到：\n\n    deploy:\n      type: github\n      repository: https://github.com/barretlee/skylarblog.git\n      branch: gh-pages   \n\n将 repository 改成你自己的地址，`https://github.com/zhangmengxue/blog.git`\n\n目前在 master 分支下操作，执行下面的命令之后，会在 github 上自动生成一个 gh-pages 分支，这个分支不用理会，它是自动生成的。只需要在这个分支下开发。\n\n## 四、快速指南\n\n### 编译\n\n    $ hexo generate\n    简写：hexo g\n\n编辑的文档使用的 md 语法，使用 `hexo g` 将 md 文件编译成 html 文件，然后执行 `hexo s`就可以在本地预览了。\n\n更多信息: [Generating](http://hexo.io/docs/generating.html)\n\n### 启动本地服务器\n\n    $ hexo server\n    简写：hexo s\n\n会开启一个端口为 4000 的本地服务器，可以用于本地调试\n\n更多信息: [Server](http://hexo.io/docs/server.html)\n\n### 直接将代码部署到 Github Pages\n\n    $ hexo deploy\n    简写： hexo d\n\n更多信息: [Deployment](http://hexo.io/docs/deployment.html)\n\n### 组合命令\n\n    # 编译之后，打开本地服务器\n    hexo s -g\n    # 编译之后，直接发布到 Github Pages\n    hexo d -g\n\n\n## 五、发表文章\n\n### 创建一篇新的文章\n\n    $ hexo new post-name\n    简写：hexo n post-name\n\n这句命令会在 source/_posts 下生成一个叫做 post-name.md 的文件，然后通过 `hexo d -g`，打开本地服务器查看网页内容。\n\n### 创建一个页面\n\n    hexo new page about\n    简写：hexo n page about\n\n这条命令就可以生成一个 about 页面。\n\n更多信息: [Writing](http://hexo.io/docs/writing.html)\n\n### 把修改保存到自己的 github 上\n\n    # 添加自己的仓库源\n    git remote add skylar https://github.com/zhangmengxue/blog.git\n    # 推上去\n    git push skylar master\n    ## 这里需要注意的是，不需要管 gh-pages 分支，这个分支已经被 hexo 自动推送了\n\n\n## 六、其他方面的介绍\n\n在 themes/jacman 中可以配置页面信息，css 采用 stylus 写的，博客信息的配置也可在 `themes/jacman/_config.yml` 中修改。\n\n如果需要修改文件内容，建议直接在全局搜索关键词。\n\n","slug":"hei-hexo","published":1,"date":"2015-04-12T02:36:49.000Z","updated":"2015-04-12T02:36:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8hi8eo6000c2sbe29dc63jp"},{"title":"相识HTML5 canvas","date":"2015-02-25T14:58:44.000Z","_content":"\nCanvas是HTML的API，我们可以用它在网页中实时的来生成图像。\n\n文章导读\n\n　　1.必备技能\n\n　　2.用于画图的函数\n\n　　　　例子：-会话气泡- -心形- -钟表- -星球里的星星-  -调色板- -鼠标绘图-  -旋转的小方块-\n\n　　3.图像的处理\n\n　　　　例子：\n\n　　　　　　-图像的灰度和翻转效果- -拾色器-  -放大镜- -图像的高斯模糊-　\n\n### 一、必备技能\n\n这是一个canvas标签：\n\n\t<canvas id=\"c1\" width=\"400\" height=\"400\">\n\t\t<span>注意：不支持canvas的浏览器就会显示这个span标签中的内容,并且在css中定义canvas的宽高是等比例缩放的，canvas中行内的宽高样式才是画布的大小</span>\n\t</canvas>\n\n控制它的宽高是要写在行内样式中的，像上面那样。这样我们就有了一个canvas元素，然后我们就可以去操作它了：\n\n\tvar canvas = document.getElementById('Canvas');\n\n\tif (canvas.getContext) {\n\t    var content = canvas.getContext('2d');\n\t}\n\n获取元素的同时，还要获取canvas的2D绘图环境。要是用于3D绘图的话，就要用WebGL了。\n\n### 二、用于画图的函数\n\n然后，我们要开始在画布上绘图了。它的画布是这样的网格：\n\n![图1](/img/canvas.png) \n\n**2.1矩形**\n\ncanvas中只支持这一种形状的函数，别的形状就都要自己组合来实现了。\n\n\tfillRect(x, y, width, height) //画一个填充的矩形\n\tstrokeRect(x, y, width, height) //画一个只有边框的矩形\n\tclearRect(x, y, width, height) //清除指定的矩形区域\n\n其中的（x,y）是指矩形左上角的坐标。\n\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E7%9F%A9%E5%BD%A2.html)\n[运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E7%9F%A9%E5%BD%A2.html)\n\n**2.2路径**\n\n\t1.首先，创建一条路径－－beginPath() \n\t2.然后，通过一些绘图的方法做一些绘图操作\n\t3.然后关闭路径－－closePath()\n\t4.我们已经把路径创建好了，然后就是填充或者绘制路径到我们的画布上－－stroke()/fill()\n\n比如说画一个三角形：[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2.html)    [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2.html)\n\n需要注意的是其中两个三角形，颜色不同，一不小心可能会出问题，所以我们有时可能需要save()和restore()函数的帮助来达到局部作用的效果。\ncanvas还提供了两个移动画笔的函数：\n\n\tmoveTo(x, y) //将画笔移动到指定的(x,y)的位置\n\tlineTo(x, y) //在当前画笔的位置到指定的(x,y)位置画一条线\n\n尝试一下moveTo()方法我们可以画个笑脸：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E4%B8%AA%E7%AC%91%E8%84%B8.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E4%B8%AA%E7%AC%91%E8%84%B8.html)\n\n结合使用moveTo和lineTo方法，我们可以实现鼠标像画笔一样在画板上绘图的效果：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E9%BC%A0%E6%A0%87%E7%BB%98%E5%9B%BE.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E9%BC%A0%E6%A0%87%E7%BB%98%E5%9B%BE.html)\n\n然后我们严格的按照上面说的规范步骤，1，2，3，4并结合画圆的函数，可以自己绘制一个钟表，稍加改进就是个嘀嗒嘀嗒走的时钟了：\n[查看代码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E9%92%9F%E8%A1%A8.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E9%92%9F%E8%A1%A8.html)\n\n **2.3文字**\n\n \tfillText('要显示的文本'，x坐标，y坐标)此方法不支持文本断行，要显示多行文本只能多次调用\n\n通过fillText()方法我们可以在canvas画布上写文字：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E6%96%87%E6%9C%AC.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E6%96%87%E6%9C%AC.html)\n\n**2.4圆形和扇形**\n\n\tctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n\n\t(x,y)－－圆心坐标\n\tradius－－半径\n\tstartAngle－－扇形的起始角度（弧度）\n\tendAngle－－扇形的终止角度（弧度）\n\tanticlockwise－－做图时是顺时针画（true）还是逆时针（false）画\n\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E5%9C%86%E5%BD%A2%E5%92%8C%E6%89%87%E5%BD%A2.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E5%9C%86%E5%BD%A2%E5%92%8C%E6%89%87%E5%BD%A2.html)\n\n结合对rgb颜色的相关操作，我们可以做出类似调色板的效果：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E8%B0%83%E8%89%B2%E6%9D%BF.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E8%B0%83%E8%89%B2%E6%9D%BF.html)\n\n**2.5不规则图形**\n\n我们可以通过画曲线来得到不规则的图形，canvas为我们提供了两个高大上的函数：\n\n\t－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n\t#quadraticCurveTo(cp1x, cp1y, x, y)\n\t(cp1x,cp1y)－－控制点\n\t此函数表示从当前的画笔位置到（x，y）画一条二次曲线\n\t－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n\t#bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)\n\t(cp1x,cp1y)－－控制点1  (cp2x,cp2y)－－控制点2\n\t此函数表示从当前的画笔位置到（x，y）画一条bezier曲线\n\t－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n\n这两个曲线具体含义我也不太清楚，但大概是这个样子：\n\n![图2](/img/canvas2.png)\n\n画个会话气泡试一下quadraticCurveTo函数：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E4%B8%AA%E4%BC%9A%E8%AF%9D%E6%B0%94%E6%B3%A1.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E4%B8%AA%E4%BC%9A%E8%AF%9D%E6%B0%94%E6%B3%A1.html)\n\n画个心形试一下bezierCurveTo函数：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E5%BF%83%E5%BD%A2.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E5%BF%83%E5%BD%A2.html)\n\n**2.6渐变和阴影**\n\n\t＃渐变：\n\tvar myGradient = ctx.createLinearGradient(x1, y1, x2, y2); \n\t(x1,y1)－－起点坐标  (x2,y2)－－终点坐标\n\tmyGradient.addColorStop(0, \"#BABABA\"); \n\t－－添加起始颜色\n\tmyGradient.addColorStop(1, \"#636363\");\n\t－－添加终止的颜色\n\n\t－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n\n\t＃阴影\n\tctx.shadowOffsetX = 10; // 设置水平位移\n\tctx.shadowOffsetY = 10; // 设置垂直位移\n\tctx.shadowBlur = 5; // 设置模糊度\n\tctx.shadowColor = \"rgba(0,0,0,0.5)\"; // 设置阴影颜色\n\n一个也不太搭边儿的例子，不管怎么说，也用到了渐变呢，满是星星的星球：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E6%98%9F%E7%90%83%E9%87%8C%E7%9A%84%E6%98%9F%E6%98%9F.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E6%98%9F%E7%90%83%E9%87%8C%E7%9A%84%E6%98%9F%E6%98%9F.html)\n这里面用到了clip（）方法来实现星星，这跟某css属性clip－path比较神似，我以前尝试过：\n请戳：[源码](https://github.com/zhangmengxue/Practice/blob/master/clip-path%E7%A5%9E%E6%8A%80%E5%B7%A7.html)   [示例](https://rawgit.com/zhangmengxue/Practice/master/clip-path%E7%A5%9E%E6%8A%80%E5%B7%A7.html)\n\n**2.7变换**\n\ncanvas中有我们熟悉的几个变换函数：\n\n\ttranslate(x, y) －－平移\n\trotate(angle) －－旋转\n\tscale(x, y) －－缩放\n\ttransform(a, b, c, d, e, f) －－变换\n\t上面的变换函数是根据变换矩阵进行的：\n\t   a   c   e\n\t［ b   d   f ］\n\t   0   0   1\n\n简单的小例子：[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E6%97%8B%E8%BD%AC%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E6%97%8B%E8%BD%AC%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97.html)\n\n### 三、图像处理\n\n几个关键函数：\n\n\tvar myImageData = ctx.createImageData(width, height);\n\tctx.getImageData(left, top, width, height);//读取canvas的内容，返回一个对象且该对象有一个data属性，可以供我们操作页面的像素。\n\tctx.putImageData(myImageData, dx, dy);//将操作好的对象重新绘制在画布中\n\tctx.drawImage(img, 0, 0); // 我们常用的drawImage方法，设置对应的图像对象，以及它在画布上的位置\n\n通过getImageData()方法获取到图像对象，访问它的data属性就可以得到一个像素数组，我们对像素进行处理，使我们可以用canvas处理图像。\n\n**3.1 灰度效果**\n\n灰度图（grayscale）就是取红、绿、蓝三个像素值的算术平均值，这实际上将图像转成了黑白形式。假定d[i]是像素数组中一个象素的红色值，则d[i+1]为绿色值，d[i+2]为蓝色值，d[i+3]就是alpha通道值。转成灰度的算法，就是将红、绿、蓝三个值相加后除以3，再将结果写回数组。\n\n\t for(var i=0;i<data.length;i+=4){\n         var avg = (data[i]+data[i+1]+data[i+2]) / 3;\n         data[i] = avg; //r\n         data[i+1] = avg; //g\n         data[i+2] = avg; //b\n     }\n\n**3.2 复古效果**\n\n复古效果（sepia）则是将红、绿、蓝三个像素，分别取这三个值的某种加权平均值，使得图像有一种古旧的效果。\n\n\tfor (var i = 0; i < d.length; i += 4) {\n\t\tvar r = d[i];\n\t\tvar g = d[i + 1];\n\t\tvar b = d[i + 2];\n\t\td[i]     = (r * 0.393)+(g * 0.769)+(b * 0.189); // red\n\t\td[i + 1] = (r * 0.349)+(g * 0.686)+(b * 0.168); // green\n\t\td[i + 2] = (r * 0.272)+(g * 0.534)+(b * 0.131); // blue\n\t}\n\n**3.3 反转效果**\n\n反转效果（invert）是指图片呈现一种色彩颠倒的效果。算法为红、绿、蓝通道都取各自的相反值（255-原值）\n\n\tfor (var i = 0; i < d.length; i += 4) {\n        d[i] = 255 - d[i];\n        d[i+1] = 255 - d[i + 1];\n        d[i+2] = 255 - d[i + 2];\n     }\n\n我尝试了一下灰度图的效果和反转图的效果： [查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/canvas%E5%9B%BE%E5%83%8F%E6%95%88%E6%9E%9C.html)\n注意，在我们自己本地写demo准备运行查看结果的时候，getImageData()方法可能会有问题，比如说报这个错：Failed to execute 'getImageData' on 'CanvasRenderingContext2D': The canvas has been tainted by cross-origin data\n我们知道这是域和本地运行等相关的问题，这时我们自己本地启用服务器，localhost访问就可以了。\n\n**3.4 拾色器**\n\n实现思路：通过getImageData(x,y,1,1)获得当前鼠标所在位置的一像素的图像对象，通过其data属性操作拿到它的像素值，也就是我们想得到的rgb值。\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/canvas%E6%8B%BE%E8%89%B2%E5%99%A8.html)\n\n**3.5 放大镜**\n\n实际上drawImage方法可以有多个参数，提供更加丰富的功能：\n\n\t1  ctx.drawImage(image, dx, dy);\n\t2  ctx.drawImage(image, dx, dy, dWidth, dHeight);\n\t3  ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n\n各个参数就像下面的示意图这样：\n\n![图3](/img/canvas3.png)\n\n然后我们就可以使用drawImage方法在原图像变换到绘制的图像中做一个等比放大的操作，就可以实现放大镜的效果啦： [查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/canvas%E6%94%BE%E5%A4%A7%E9%95%9C%E6%95%88%E6%9E%9C.html)\n\n**3.6图像的高斯模糊**\n\n其实，css中有一个兼容性不那么好的filter属性，可以简单的实现图像模糊的效果：\n\n\t -webkit-filter: blur(20px); /* Chrome, Opera */\n\t    -moz-filter: blur(20px);\n\t     -ms-filter: blur(20px);    \n\t         filter: blur(20px);\n\n但是使用canvas可以实现真正意义上的高斯模糊（就是算法那种balabala的）。\n这里有一个实现的很好的高斯模糊的js：[StackBlur](http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html)\n使用它我们就可以轻松的实现图像的高斯模糊了：[查看源码](http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html)\n\n### 四、资源\n\ncanvas中绘图环境所有的属性和方法都可以在这里找到：[CanvasRenderingContext2D interface](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D)\n\n[使用CSS将图片转换成模糊(毛玻璃)效果](http://www.zhangxinxu.com/wordpress/2013/11/%E5%B0%8Ftip-%E4%BD%BF%E7%94%A8css%E5%B0%86%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E6%88%90%E6%A8%A1%E7%B3%8A%E6%AF%9B%E7%8E%BB%E7%92%83%E6%95%88%E6%9E%9C/)\n\n[Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)\n\n[javascript标准参考教程Canvas](http://javascript.ruanyifeng.com/htmlapi/canvas.html)","source":"_posts/canvas.md","raw":"title: 相识HTML5 canvas\ndate: 2015-02-25 22:58:44\ntags:\n- 博客\n---\n\nCanvas是HTML的API，我们可以用它在网页中实时的来生成图像。\n\n文章导读\n\n　　1.必备技能\n\n　　2.用于画图的函数\n\n　　　　例子：-会话气泡- -心形- -钟表- -星球里的星星-  -调色板- -鼠标绘图-  -旋转的小方块-\n\n　　3.图像的处理\n\n　　　　例子：\n\n　　　　　　-图像的灰度和翻转效果- -拾色器-  -放大镜- -图像的高斯模糊-　\n\n### 一、必备技能\n\n这是一个canvas标签：\n\n\t<canvas id=\"c1\" width=\"400\" height=\"400\">\n\t\t<span>注意：不支持canvas的浏览器就会显示这个span标签中的内容,并且在css中定义canvas的宽高是等比例缩放的，canvas中行内的宽高样式才是画布的大小</span>\n\t</canvas>\n\n控制它的宽高是要写在行内样式中的，像上面那样。这样我们就有了一个canvas元素，然后我们就可以去操作它了：\n\n\tvar canvas = document.getElementById('Canvas');\n\n\tif (canvas.getContext) {\n\t    var content = canvas.getContext('2d');\n\t}\n\n获取元素的同时，还要获取canvas的2D绘图环境。要是用于3D绘图的话，就要用WebGL了。\n\n### 二、用于画图的函数\n\n然后，我们要开始在画布上绘图了。它的画布是这样的网格：\n\n![图1](/img/canvas.png) \n\n**2.1矩形**\n\ncanvas中只支持这一种形状的函数，别的形状就都要自己组合来实现了。\n\n\tfillRect(x, y, width, height) //画一个填充的矩形\n\tstrokeRect(x, y, width, height) //画一个只有边框的矩形\n\tclearRect(x, y, width, height) //清除指定的矩形区域\n\n其中的（x,y）是指矩形左上角的坐标。\n\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E7%9F%A9%E5%BD%A2.html)\n[运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E7%9F%A9%E5%BD%A2.html)\n\n**2.2路径**\n\n\t1.首先，创建一条路径－－beginPath() \n\t2.然后，通过一些绘图的方法做一些绘图操作\n\t3.然后关闭路径－－closePath()\n\t4.我们已经把路径创建好了，然后就是填充或者绘制路径到我们的画布上－－stroke()/fill()\n\n比如说画一个三角形：[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2.html)    [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2.html)\n\n需要注意的是其中两个三角形，颜色不同，一不小心可能会出问题，所以我们有时可能需要save()和restore()函数的帮助来达到局部作用的效果。\ncanvas还提供了两个移动画笔的函数：\n\n\tmoveTo(x, y) //将画笔移动到指定的(x,y)的位置\n\tlineTo(x, y) //在当前画笔的位置到指定的(x,y)位置画一条线\n\n尝试一下moveTo()方法我们可以画个笑脸：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E4%B8%AA%E7%AC%91%E8%84%B8.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E4%B8%AA%E7%AC%91%E8%84%B8.html)\n\n结合使用moveTo和lineTo方法，我们可以实现鼠标像画笔一样在画板上绘图的效果：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E9%BC%A0%E6%A0%87%E7%BB%98%E5%9B%BE.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E9%BC%A0%E6%A0%87%E7%BB%98%E5%9B%BE.html)\n\n然后我们严格的按照上面说的规范步骤，1，2，3，4并结合画圆的函数，可以自己绘制一个钟表，稍加改进就是个嘀嗒嘀嗒走的时钟了：\n[查看代码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E9%92%9F%E8%A1%A8.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E9%92%9F%E8%A1%A8.html)\n\n **2.3文字**\n\n \tfillText('要显示的文本'，x坐标，y坐标)此方法不支持文本断行，要显示多行文本只能多次调用\n\n通过fillText()方法我们可以在canvas画布上写文字：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E6%96%87%E6%9C%AC.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E6%96%87%E6%9C%AC.html)\n\n**2.4圆形和扇形**\n\n\tctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n\n\t(x,y)－－圆心坐标\n\tradius－－半径\n\tstartAngle－－扇形的起始角度（弧度）\n\tendAngle－－扇形的终止角度（弧度）\n\tanticlockwise－－做图时是顺时针画（true）还是逆时针（false）画\n\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E5%9C%86%E5%BD%A2%E5%92%8C%E6%89%87%E5%BD%A2.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E5%9C%86%E5%BD%A2%E5%92%8C%E6%89%87%E5%BD%A2.html)\n\n结合对rgb颜色的相关操作，我们可以做出类似调色板的效果：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E8%B0%83%E8%89%B2%E6%9D%BF.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E8%B0%83%E8%89%B2%E6%9D%BF.html)\n\n**2.5不规则图形**\n\n我们可以通过画曲线来得到不规则的图形，canvas为我们提供了两个高大上的函数：\n\n\t－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n\t#quadraticCurveTo(cp1x, cp1y, x, y)\n\t(cp1x,cp1y)－－控制点\n\t此函数表示从当前的画笔位置到（x，y）画一条二次曲线\n\t－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n\t#bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)\n\t(cp1x,cp1y)－－控制点1  (cp2x,cp2y)－－控制点2\n\t此函数表示从当前的画笔位置到（x，y）画一条bezier曲线\n\t－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n\n这两个曲线具体含义我也不太清楚，但大概是这个样子：\n\n![图2](/img/canvas2.png)\n\n画个会话气泡试一下quadraticCurveTo函数：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E4%B8%AA%E4%BC%9A%E8%AF%9D%E6%B0%94%E6%B3%A1.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E4%B8%AA%E4%BC%9A%E8%AF%9D%E6%B0%94%E6%B3%A1.html)\n\n画个心形试一下bezierCurveTo函数：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E7%94%BB%E5%BF%83%E5%BD%A2.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E7%94%BB%E5%BF%83%E5%BD%A2.html)\n\n**2.6渐变和阴影**\n\n\t＃渐变：\n\tvar myGradient = ctx.createLinearGradient(x1, y1, x2, y2); \n\t(x1,y1)－－起点坐标  (x2,y2)－－终点坐标\n\tmyGradient.addColorStop(0, \"#BABABA\"); \n\t－－添加起始颜色\n\tmyGradient.addColorStop(1, \"#636363\");\n\t－－添加终止的颜色\n\n\t－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n\n\t＃阴影\n\tctx.shadowOffsetX = 10; // 设置水平位移\n\tctx.shadowOffsetY = 10; // 设置垂直位移\n\tctx.shadowBlur = 5; // 设置模糊度\n\tctx.shadowColor = \"rgba(0,0,0,0.5)\"; // 设置阴影颜色\n\n一个也不太搭边儿的例子，不管怎么说，也用到了渐变呢，满是星星的星球：\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E6%98%9F%E7%90%83%E9%87%8C%E7%9A%84%E6%98%9F%E6%98%9F.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E6%98%9F%E7%90%83%E9%87%8C%E7%9A%84%E6%98%9F%E6%98%9F.html)\n这里面用到了clip（）方法来实现星星，这跟某css属性clip－path比较神似，我以前尝试过：\n请戳：[源码](https://github.com/zhangmengxue/Practice/blob/master/clip-path%E7%A5%9E%E6%8A%80%E5%B7%A7.html)   [示例](https://rawgit.com/zhangmengxue/Practice/master/clip-path%E7%A5%9E%E6%8A%80%E5%B7%A7.html)\n\n**2.7变换**\n\ncanvas中有我们熟悉的几个变换函数：\n\n\ttranslate(x, y) －－平移\n\trotate(angle) －－旋转\n\tscale(x, y) －－缩放\n\ttransform(a, b, c, d, e, f) －－变换\n\t上面的变换函数是根据变换矩阵进行的：\n\t   a   c   e\n\t［ b   d   f ］\n\t   0   0   1\n\n简单的小例子：[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/%E6%97%8B%E8%BD%AC%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97.html)   [运行结果](https://rawgit.com/zhangmengxue/Practice/master/canvas/%E6%97%8B%E8%BD%AC%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97.html)\n\n### 三、图像处理\n\n几个关键函数：\n\n\tvar myImageData = ctx.createImageData(width, height);\n\tctx.getImageData(left, top, width, height);//读取canvas的内容，返回一个对象且该对象有一个data属性，可以供我们操作页面的像素。\n\tctx.putImageData(myImageData, dx, dy);//将操作好的对象重新绘制在画布中\n\tctx.drawImage(img, 0, 0); // 我们常用的drawImage方法，设置对应的图像对象，以及它在画布上的位置\n\n通过getImageData()方法获取到图像对象，访问它的data属性就可以得到一个像素数组，我们对像素进行处理，使我们可以用canvas处理图像。\n\n**3.1 灰度效果**\n\n灰度图（grayscale）就是取红、绿、蓝三个像素值的算术平均值，这实际上将图像转成了黑白形式。假定d[i]是像素数组中一个象素的红色值，则d[i+1]为绿色值，d[i+2]为蓝色值，d[i+3]就是alpha通道值。转成灰度的算法，就是将红、绿、蓝三个值相加后除以3，再将结果写回数组。\n\n\t for(var i=0;i<data.length;i+=4){\n         var avg = (data[i]+data[i+1]+data[i+2]) / 3;\n         data[i] = avg; //r\n         data[i+1] = avg; //g\n         data[i+2] = avg; //b\n     }\n\n**3.2 复古效果**\n\n复古效果（sepia）则是将红、绿、蓝三个像素，分别取这三个值的某种加权平均值，使得图像有一种古旧的效果。\n\n\tfor (var i = 0; i < d.length; i += 4) {\n\t\tvar r = d[i];\n\t\tvar g = d[i + 1];\n\t\tvar b = d[i + 2];\n\t\td[i]     = (r * 0.393)+(g * 0.769)+(b * 0.189); // red\n\t\td[i + 1] = (r * 0.349)+(g * 0.686)+(b * 0.168); // green\n\t\td[i + 2] = (r * 0.272)+(g * 0.534)+(b * 0.131); // blue\n\t}\n\n**3.3 反转效果**\n\n反转效果（invert）是指图片呈现一种色彩颠倒的效果。算法为红、绿、蓝通道都取各自的相反值（255-原值）\n\n\tfor (var i = 0; i < d.length; i += 4) {\n        d[i] = 255 - d[i];\n        d[i+1] = 255 - d[i + 1];\n        d[i+2] = 255 - d[i + 2];\n     }\n\n我尝试了一下灰度图的效果和反转图的效果： [查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/canvas%E5%9B%BE%E5%83%8F%E6%95%88%E6%9E%9C.html)\n注意，在我们自己本地写demo准备运行查看结果的时候，getImageData()方法可能会有问题，比如说报这个错：Failed to execute 'getImageData' on 'CanvasRenderingContext2D': The canvas has been tainted by cross-origin data\n我们知道这是域和本地运行等相关的问题，这时我们自己本地启用服务器，localhost访问就可以了。\n\n**3.4 拾色器**\n\n实现思路：通过getImageData(x,y,1,1)获得当前鼠标所在位置的一像素的图像对象，通过其data属性操作拿到它的像素值，也就是我们想得到的rgb值。\n[查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/canvas%E6%8B%BE%E8%89%B2%E5%99%A8.html)\n\n**3.5 放大镜**\n\n实际上drawImage方法可以有多个参数，提供更加丰富的功能：\n\n\t1  ctx.drawImage(image, dx, dy);\n\t2  ctx.drawImage(image, dx, dy, dWidth, dHeight);\n\t3  ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n\n各个参数就像下面的示意图这样：\n\n![图3](/img/canvas3.png)\n\n然后我们就可以使用drawImage方法在原图像变换到绘制的图像中做一个等比放大的操作，就可以实现放大镜的效果啦： [查看源码](https://github.com/zhangmengxue/Practice/blob/master/canvas/canvas%E6%94%BE%E5%A4%A7%E9%95%9C%E6%95%88%E6%9E%9C.html)\n\n**3.6图像的高斯模糊**\n\n其实，css中有一个兼容性不那么好的filter属性，可以简单的实现图像模糊的效果：\n\n\t -webkit-filter: blur(20px); /* Chrome, Opera */\n\t    -moz-filter: blur(20px);\n\t     -ms-filter: blur(20px);    \n\t         filter: blur(20px);\n\n但是使用canvas可以实现真正意义上的高斯模糊（就是算法那种balabala的）。\n这里有一个实现的很好的高斯模糊的js：[StackBlur](http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html)\n使用它我们就可以轻松的实现图像的高斯模糊了：[查看源码](http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html)\n\n### 四、资源\n\ncanvas中绘图环境所有的属性和方法都可以在这里找到：[CanvasRenderingContext2D interface](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D)\n\n[使用CSS将图片转换成模糊(毛玻璃)效果](http://www.zhangxinxu.com/wordpress/2013/11/%E5%B0%8Ftip-%E4%BD%BF%E7%94%A8css%E5%B0%86%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E6%88%90%E6%A8%A1%E7%B3%8A%E6%AF%9B%E7%8E%BB%E7%92%83%E6%95%88%E6%9E%9C/)\n\n[Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)\n\n[javascript标准参考教程Canvas](http://javascript.ruanyifeng.com/htmlapi/canvas.html)","slug":"canvas","published":1,"updated":"2015-04-12T02:36:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8hi8eo8000f2sbe4zowkp6v"},{"title":"再看Ajax","date":"2015-02-01T06:00:35.000Z","_content":"\n再回顾Ajax相关的内容，再次梳理学习还是很有必要的，尤其是实际的开发中，ajax更是必不可少，仔细学习以便避免不必要的错误。\n\n##一.使用XMLHttpRequest\n\n从Ajax的工作原理来看，它是一种可以使用脚本操纵HTTP和Web服务器进行数据交换并且不会导致页面重载的技术。Ajax的核心就是XMLHttpRequest对象。\n\n\tvar xhr = new XMLHttpRequest();\n\n这样就实例化了一个XMLHttpRequest对象，每个xhr对象都表示一个独立的请求响应对，通过这个对象的属性和方法我们可以查看请求的细节和得到响应的数据。\n\n1.1 必备知识点\n\n下面举个梨子：\n\n\tfunction getText(url,callback){\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET',url);\n        xhr.onreadystatechange = function(){\n          if(xhr.readyState === 4 && xhr.status === 200){\n            var type = xhr.getResponseHeader('Content-Type');\n            if(type.match(/^text/)){\n              callback(xhr.responseText);\n            }\n         }\n       };\n       xhr.send(null);\n     }\n     function callback(obj){\n       console.log(obj);\n     }\n\n\n从中可以看到一些xhr对象的方法和属性：\n\n---  xhr.setRequestHeader(\"Content-Type\",\"text/plain\");它用来设置请求头的信息，post请求通常会设置前面的Content-Type的请求头，比如说我想跨域发送请求，那你可能就要设置xhr.setRequestHeader(\"Origin\",\"url\")了(要真的跨域还需要在服务器端设置Access-Control-Allow-Origin)。但是并不能设置所有的请求头信息，你可以设置除了下面这些头之外的信息：Accept-Charset,Accept-Encoding,Connection,Content-Length,Cookie,Cookie2,Content-Transfer-Encoding,Date,Expect,Host,Keep-Alive,Referrer,User-Agent,Trailer,Transfer-Encoding,Upgrade,Via.\n\n---  xhr.getResponseHeader()和xhr.getAllResponseHeader()用来查询响应头信息。\n\n---  xhr.status(数字)和xhr.statusText(文本)返回HTTP状态码(200,404等)；\n\n---  xhr.responseText(文本形式)和xhr.responseXML(document形式)得到响应主体；\n\n---  xhr.readyState得到一个整数，指定了HTTP请求的状态，有如下对应关系：\n\n\t+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\t常量                            值                    含义   \n\t-----------------------------------------------------------------------------\n\tUNSENT                         0                    open()尚未调用\n\tOPENED                         1                    open()已调用\n\tHEADERS_RECEIVED    　　　　　   2                    接收到头信息\n\tLOADING                        3                     接收到响应主体\n\tDONE                           4                     响应完成\n\t+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n--- xhr.overrideMimeType('text/plain;charset=x-user-defined');overrideMimeType方法用来指定服务器返回的数据的Mime类型；\n\n--- xhr.responseType属性，它用来指定服务器返回的数据的类型，xhr2允许用户自行设置这个属性了(上面的overrideMimeType方法就是一般在不支持这个属性的情况下使用的)。\n\n　　xhr.responseType='text'(字符串)/'arrayBuffer'/'blob'(二进制数据)/'document'/'json'(JSON对象)\n\n---  事件：XMLHttpRequest对象原本只有一个事件xhr.onreadystatechange = function(){}，但是XMLHttpRequest2扩展了几个新的事件：\n\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\t事件                        描述\n\t------------------------------------------------------------------------------\n\tonloadstart                请求开始时触发\n\tonprogress                 开始加载并发送数据时触发\n\tonabort                    请求终止时出发，比如调用了abort()方法\n\tonerror                    请求失败时触发\n\tonload                     请求成功完成时触发\n\tontimeout                  自定义的超时时间超过，请求还没完成时触发\n\tonloadend                  请求完成时触发（success or failure）\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n1.2 send()方法\n\n请求中的send()方法，通常在发送POST请求时用于发送主体数据，发送GET请求时通常为空。\n\n在XHR2中send()方法可以发送很多类型的数据。\n\n\tvoid send();\n\tvoid send(ArrayBuffer data);\n\tvoid send(Blob data); //用来发送二进制数据（这使得通过Ajax上传文件成为了可能）\n\tvoid send(Document data);\n\tvoid send(DOMString data);\n\tvoid send(FormData data); //用于构造表单数据\n\n通过Ajax提交表单数据还是很有意义的。传统的做法中，点击页面中表单的submit按钮，需要跳转到一个空页面，然后再对原页面的数据进行处理。ajax则不用，可以直接在原页面进行提交后的处理。\n\n发送FormData类型的数据为我们提供了便利：\n\n\tvar formData = new FormData();\n  \n\tformData.append('username','mengxue');//第一个参数为<input>标签的name属性\n\tformData.append('email','673013891@qq.com');//第二个参数为value属性\n\tformData.append('city','hangzhou');\n \n\t//现有表单中没有的数据也可以构造在请求中\n\tformData.append('birthday', '930920');\n  \n\txhr.send(formData);\n\n1.3  再看CORS\n\nCORS（跨域资源共享），它的出现就是为了解救Ajax受限于同源策略，实现跨域。 \n\n预检机制：\n\n我们可能只知道要实现跨域要请求头带上Origin头，并且服务器响应Access-Control-Request-Method头表示同意跨域的请求。但其实我们忽略了它背后的一个预检机制，也就是说会有类似这样一个预检请求：\n\n\t1 OPTIONS /resources/post-here/ HTTP/1.1\n \t2 Host: www.google.com\n \t3 User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre\n \t4 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n \t5 Accept-Language: en-us,en;q=0.5\n \t6 Accept-Encoding: gzip,deflate\n \t7 Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\n \t8 Connection: keep-alive\n\t9 Origin: http://www.example.com\n\t10 Access-Control-Request-Method: POST\n\t11 Access-Control-Request-Headers: X-PINGOTHER\n\nOPTIONS就是告诉我们这是一个“预检”请求。里面有关键的Origin头信息。\n\n\tAccess-Control-Request-Method: POST\n\tAccess-Control-Request-Headers: X-PINGOTHER\n\n这两个头信息就告诉服务器，如果我发送请求的话将会是POST请求，我还可能自己定义个X-PINGOTHER的请求头信息。\n\n同样的，服务器也会响应这个预检的请求：\n\n\tHTTP/1.1 200 OK\n\tDate: Mon, 01 Dec 2008 01:15:39 GMT\n\tServer: Apache/2.0.61 (Unix)\n\tAccess-Control-Allow-Origin: http://www.example.com\n\tAccess-Control-Allow-Methods: POST, GET, OPTIONS\n\tAccess-Control-Allow-Headers: X-PINGOTHER\n\tAccess-Control-Max-Age: 1728000\n\tVary: Accept-Encoding, Origin\n\tContent-Encoding: gzip\n\tContent-Length: 0\n\tKeep-Alive: timeout=2, max=100\n\tConnection: Keep-Alive\n\tContent-Type: text/plain\n\n我们期待服务器同意我的跨域请求的Access-Control-Allow-Origin头也有了，告诉我服务器同意了。也同意了我想自定义一个请求头信息的愿望。\n\n下面还有一个响应头信息：\n\n\tAccess-Control-Max-Age: 1728000\n\n它呢，是用来控制这条预检请求的缓存时长的，在这1728000秒之内，都不用再发送预检请求了。\n\n因为整个预检的过程都是浏览器在后台神不知鬼不觉完成的，所以我们都不知道。\n\n\nCORS中的Cookie：\n\nCORS机制默认是不会发送cookie信息和HTTP的认证信息的，除非我们改变设置。可以这样：\n\n\txhr.withCredentials = true;\n\n同时服务器响应：\n\n\tAccess-Control-Allow-Credentials:true //这里值不能为*必须明确指定域名\n\n这时，我们在发送请求的时候才会捎带上cookie的信息，而且这里的cookie也遵循同源策略，只有服务器域名下的cookie信息才会被捎带。\n\n##二、HTTP请求和响应\n\n因为Ajax就是用来与服务器通信的，那么这里它就离不开HTTP，也就会去请求然后获得响应。这里稍微详细的了解下请求头与响应头相关的信息。\n\n一个 HTTP请求由4部分组成：\n\n　　-- HTTP请求方法或“动作”；\n\n　　-- 正在请求的URL；\n\n　　-- 一个可选的请求头集合，其中可能包括身份验证信息；\n\n　　-- 一个可选的请求主体 ；\n\n服务器返回的HTTP响应包含3部分：\n\n　　-- 一个数字和文字组成的状态码，用来显示请求的成功和失败\n\n　　-- 一个响应头集合\n\n　　-- 响应主体\n\n \n\n我在网上找了一个参数尽可能多的请求，下面是它的请求头信息和响应头信息：\n\n![图2.1](/img/21.png) \n\n2.1 Request Headers中的一些参数：\n\n1. Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n\n含义：浏览器支持的 MIME 类型分别是 text/html、application/xhtml+xml、application/xml 和 */*，优先顺序是它们从左到右的排列顺序。\n\n详解：\n\n　　-- Accept表示浏览器支持的 MIME 类型；\n\n　　-- MIME的英文全称是 Multipurpose Internet Mail Extensions（多功能 Internet 邮件扩充服务），它是一种多用途网际邮件扩充协议，在1992年最早应用于电子邮件系统，但后来也应用到浏览器;\n\n　　-- text/html,application/xhtml+xml,application/xml 都是 MIME 类型，也可以称为媒体类型和内容类型，斜杠前面的是 type（类型），斜杠后面的是 subtype（子类型）,type 指定大的范围，subtype 是 type 中范围更明确的类型，即大类中的小类;\n\n　　-- Text用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的;\n\n　　-- text/html表示 html 文档;\n\n　　-- Application：用于传输应用程序数据或者二进制数据;\n\n　　-- application/xhtml+xml表示 xhtml 文档;\n\n　　-- application/xml表示 xml 文档;\n\n　　-- q是权重系数，范围 0 =< q <= 1，q 值越大，请求越倾向于获得其“;”之前的类型表示的内容，若没有指定 q 值，则默认为1，若被赋值为0，则用于提醒服务器哪些是浏览器不接受的内容类型。\n\n2.Accept-Encoding: gzip, deflate\n\n含义：标示浏览器支持的压缩编码是gzip和deflate和sdcn。\n\n3.Accept-Language:zh-CN,zh;q=0.8\n\n含义：浏览器支持的语言，zh-CN是简体中文，zh是中文。\n\n4.Cache-Control:max-age=0(请求头中的Cache-Control)\n\n含义：Cache-Control头是用来在请求/响应这个过程中控制缓存的。\n\n他可以有的参数:\n\n　　max-age=0单位是秒，它表示客户端可接受的响应等待时间；\n\n　　max-stale表示客户端愿意接受一个响应，即使它已经超过了它新鲜的寿命（可以有值也可以没有值）；\n\n　　min-fresh=10他表示客户端愿意接受一个响应的保鲜寿命不小于目前的年龄加上指定的时间在几秒钟内；\n\n　　no-cache表示不接受缓存的响应；\n\n　　no-store表示缓存不可以保存请求和响应的任何部分；\n\n　　only-if-cache:它表示客户端只想要获得一个被缓存起来了的响应。\n\n5.Host\n\n含义：客户端指定自己想访问的WEB服务器的域名/IP 地址和端口号.\n\n6.Content-Type:application/x-www-form-urlencoded\n\n含义：请求头的Content-Type定义传递到服务器的数据类型，数据由服务器端处理！Content-Type后面的值就是一个MIME类型。application/x-www-form-urlencoded实际上就是指表单提交的数据，如果上传附件，就会是multipart/form-data。响应头的Content- Type定义返回到客户端的数据类型。\n\n其他一些常见易理解的参数，这里就不列举啦。\n\n \n\n2.2 Response Headers中的一些参数：\n\n1.Accept-Ranges:bytes\n\n含义：WEB服务器表明自己是否接受获取其某个实体的一部分（比如文件的一部分）的请求。bytes：表示接受，none：表示不接受。\n\n2.Cache-Control：Public\n\n　　   public(可以用 Cached 内容回应任何用户)\n         private（只能用缓存内容回应先前请求该内容的那个用户）\n         no-cache（可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端）\n         max-age：（本响应包含的对象的过期时间）\n         ALL:  no-store（不允许缓存）\n\n3.ETag\n\n含义：它是一个对象的标志值，用于确认请求的文件是否被更改。比如一个 html 文件，如果被修改了，其 Etag 也会别修改，所以，ETag 的作用跟 Last-Modified 的作用差不多，主要供 WEB 服务器判断一个对象是否改变了。比如前一次请求某个 html 文件时，获得了其 ETag，当这次又请求这个文件时，浏览器就会把先前获得的 ETag 值发送给  WEB 服务器，然后 WEB 服务器会把这个 ETag 跟该文件的当前 ETag 进行对比，然后就知道这个文件有没有改变了。\n\n4.Expires\n\n含义：WEB服务器表明该实体将在什么时候过期，对于过期了的对象，只有在跟WEB服务器验证了其有效性后，才能用来响应客户请求\n\n5.Last-Modified\n\n含义：WEB 服务器认为对象的最后修改时间，比如文件的最后修改时间，动态页面的最后产生时间等等\n\n[更为详细些的头部参数的说明](http://yolcy.blog.163.com/blog/static/105307937201022471913971/)\n\n2.3 GET请求和POST请求的区别\n\n也许你也曾想过GET和POST方法的区别，这里整理一下我了解到的：\n\nGET：\n\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\tGET方法用于向指定的资源或服务器请求数据\n\t--------------------------------------------------------------------------------\n\t1.GET请求可以被浏览器缓存\n\t2.GET请求保留在浏览器的历史记录中\n\t3.GET请求可以被收藏为书签\n\t4.GET请求不应该在处理敏感数据时使用，它的安全性有待商榷\n\t5.GET请求有长度的限制\n\t6.GET请求应当只用于取回数据\n\t7.GET请求从来没有主体，需要的查询参数要编码放在url后面作为查询字符串\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nPOST：\n\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\tPOST方法向指定的资源或服务器提交要被处理的数据\n\t------------------------------------------------------------------------------------\n\t1.POST请求不会被缓存\n\t2.POST请求不会保留在浏览器的历史记录中\n\t3.POST请求不能被收藏为书签\n\t4.POST请求对数据的长度没有要求\n\t5.POST请求通常有主体，用来提交要被处理的数据，xhr.send('数据')\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n如果想更加详细的学习HTTP协议相关的内容可以查看RFC：[RFC7230](https://tools.ietf.org/html/rfc7230#section-4.3.3) [RFC7231](https://tools.ietf.org/html/rfc7231) [RFC7232](https://tools.ietf.org/html/rfc7231) 等等\n\n\n##三.JQuery中的Ajax\n\n我们一般实际应用的时候大部分都是jQuery或Zepto中的Ajax了。\n\n我给自己列了些细节或要点，有时很有用，有时会避免错误：\n\n1.$.ajax()会返回创建的XMLHttpRequest对象，然后我们可以就可以应用xhr对象的一些属性或方法了，但大多数情况下我们不会用到，像这样：\n\n\thtmlobj=$.ajax({url:\"/jquery/test1.txt\",async:false});\n  \t$(\"#myDiv\").html(htmlobj.responseText);　\n\n2.cache：false\n\n　　有时候我们发送了个请求，返回的数据也得到了，但是后端同学在相同的接口中准备返回给你跟之前不同的数据比如说多一个字段，或少一个字段时。你肯定期待拿到新的数据了，但如果的你请求是get请求的话那么浏览器就会缓存你的Ajax请求，post请求一般不存在这个问题，于是你就纳闷了为什么数据没有变化。于是我们可以设置cache：false，使每次都发送请求而不是取缓存中的。\n\n　　3.context:document.body\n\n　　context参数可以指定回调函数的上下文，使回调函数中的$(this)指向context参数对应的DOM元素。\n\n　　4.dataType：'xml'/'jsonp'/'html'/'script'/'json'/'text'\n\n　　这是最简单务实的一个参数了，用于定于预期服务器返回的数据类型。设置值为‘script’时，将返回纯文本js代码，并且不会自动缓存结果，除非显示的设置cache为true，并且所有的POST请求都会被转为GET请求。设置值为‘jsonp’时，如果我们自己没有显示的定义回调函数的名字，jQuery会自动的帮我们添加，以正确的执行回调函数。这样我们回调函数的参数data就是json类型的数据了。\n\n##四.待扩展和实战的学习要点\n\n进一步准备学习和实战练习的：\n\n　　利用XMLHttpRequest对象特别是扩展了的二级XMLHttpRequest对象，我们还可以做很多事情，比如说：①Ajax上传文件（可以使用FormData接口或File API）②获得progress元素的上传进度（xhr对象的upload属性的progress事件）③使用abort()方法终止请求和实现超时 等等。\n\n　　HTTP用来在客户端和服务器之间建立连接进行交流，那么利用HTTP请求头信息和响应头信息其实也能做很多事情，比如：①正确的配置信息头实现请求的缓存，加快响应用户的速度②控制安全的请求同服务器交互等等。\n\n　　Jquery源码中ajax的实现方式，思想学习以及与Zepto中Ajax实现的不同。\n\n\n参考资料&相关阅读：\n\n[Ajax-Javascript标准参考教程](http://javascript.ruanyifeng.com/bom/ajax.html)\n[MDN UsingXMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest)\n[使用FormData对象](https://developer.mozilla.org/zh-CN/docs/Web/Guide/Using_FormData_Objects)\n[Web API接口查询表](https://developer.mozilla.org/zh-CN/docs/Web/API)\n[Using CORS](http://www.html5rocks.com/en/tutorials/cors/)　\n[http协议请求响应头中参数的疑问](http://www.zhihu.com/question/22073045)\n[JQuery源码分析](http://www.cnblogs.com/aaronjs/p/3279314.html)\n[Zeptojs Ajax API](http://www.css88.com/doc/zeptojs_api/#$.ajax)","source":"_posts/ajax.md","raw":"title: 再看Ajax\ndate: 2015-02-01 14:00:35\ncategories: \n- articles\ntags: \n- 博客\n---\n\n再回顾Ajax相关的内容，再次梳理学习还是很有必要的，尤其是实际的开发中，ajax更是必不可少，仔细学习以便避免不必要的错误。\n\n##一.使用XMLHttpRequest\n\n从Ajax的工作原理来看，它是一种可以使用脚本操纵HTTP和Web服务器进行数据交换并且不会导致页面重载的技术。Ajax的核心就是XMLHttpRequest对象。\n\n\tvar xhr = new XMLHttpRequest();\n\n这样就实例化了一个XMLHttpRequest对象，每个xhr对象都表示一个独立的请求响应对，通过这个对象的属性和方法我们可以查看请求的细节和得到响应的数据。\n\n1.1 必备知识点\n\n下面举个梨子：\n\n\tfunction getText(url,callback){\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET',url);\n        xhr.onreadystatechange = function(){\n          if(xhr.readyState === 4 && xhr.status === 200){\n            var type = xhr.getResponseHeader('Content-Type');\n            if(type.match(/^text/)){\n              callback(xhr.responseText);\n            }\n         }\n       };\n       xhr.send(null);\n     }\n     function callback(obj){\n       console.log(obj);\n     }\n\n\n从中可以看到一些xhr对象的方法和属性：\n\n---  xhr.setRequestHeader(\"Content-Type\",\"text/plain\");它用来设置请求头的信息，post请求通常会设置前面的Content-Type的请求头，比如说我想跨域发送请求，那你可能就要设置xhr.setRequestHeader(\"Origin\",\"url\")了(要真的跨域还需要在服务器端设置Access-Control-Allow-Origin)。但是并不能设置所有的请求头信息，你可以设置除了下面这些头之外的信息：Accept-Charset,Accept-Encoding,Connection,Content-Length,Cookie,Cookie2,Content-Transfer-Encoding,Date,Expect,Host,Keep-Alive,Referrer,User-Agent,Trailer,Transfer-Encoding,Upgrade,Via.\n\n---  xhr.getResponseHeader()和xhr.getAllResponseHeader()用来查询响应头信息。\n\n---  xhr.status(数字)和xhr.statusText(文本)返回HTTP状态码(200,404等)；\n\n---  xhr.responseText(文本形式)和xhr.responseXML(document形式)得到响应主体；\n\n---  xhr.readyState得到一个整数，指定了HTTP请求的状态，有如下对应关系：\n\n\t+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\t常量                            值                    含义   \n\t-----------------------------------------------------------------------------\n\tUNSENT                         0                    open()尚未调用\n\tOPENED                         1                    open()已调用\n\tHEADERS_RECEIVED    　　　　　   2                    接收到头信息\n\tLOADING                        3                     接收到响应主体\n\tDONE                           4                     响应完成\n\t+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n--- xhr.overrideMimeType('text/plain;charset=x-user-defined');overrideMimeType方法用来指定服务器返回的数据的Mime类型；\n\n--- xhr.responseType属性，它用来指定服务器返回的数据的类型，xhr2允许用户自行设置这个属性了(上面的overrideMimeType方法就是一般在不支持这个属性的情况下使用的)。\n\n　　xhr.responseType='text'(字符串)/'arrayBuffer'/'blob'(二进制数据)/'document'/'json'(JSON对象)\n\n---  事件：XMLHttpRequest对象原本只有一个事件xhr.onreadystatechange = function(){}，但是XMLHttpRequest2扩展了几个新的事件：\n\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\t事件                        描述\n\t------------------------------------------------------------------------------\n\tonloadstart                请求开始时触发\n\tonprogress                 开始加载并发送数据时触发\n\tonabort                    请求终止时出发，比如调用了abort()方法\n\tonerror                    请求失败时触发\n\tonload                     请求成功完成时触发\n\tontimeout                  自定义的超时时间超过，请求还没完成时触发\n\tonloadend                  请求完成时触发（success or failure）\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n1.2 send()方法\n\n请求中的send()方法，通常在发送POST请求时用于发送主体数据，发送GET请求时通常为空。\n\n在XHR2中send()方法可以发送很多类型的数据。\n\n\tvoid send();\n\tvoid send(ArrayBuffer data);\n\tvoid send(Blob data); //用来发送二进制数据（这使得通过Ajax上传文件成为了可能）\n\tvoid send(Document data);\n\tvoid send(DOMString data);\n\tvoid send(FormData data); //用于构造表单数据\n\n通过Ajax提交表单数据还是很有意义的。传统的做法中，点击页面中表单的submit按钮，需要跳转到一个空页面，然后再对原页面的数据进行处理。ajax则不用，可以直接在原页面进行提交后的处理。\n\n发送FormData类型的数据为我们提供了便利：\n\n\tvar formData = new FormData();\n  \n\tformData.append('username','mengxue');//第一个参数为<input>标签的name属性\n\tformData.append('email','673013891@qq.com');//第二个参数为value属性\n\tformData.append('city','hangzhou');\n \n\t//现有表单中没有的数据也可以构造在请求中\n\tformData.append('birthday', '930920');\n  \n\txhr.send(formData);\n\n1.3  再看CORS\n\nCORS（跨域资源共享），它的出现就是为了解救Ajax受限于同源策略，实现跨域。 \n\n预检机制：\n\n我们可能只知道要实现跨域要请求头带上Origin头，并且服务器响应Access-Control-Request-Method头表示同意跨域的请求。但其实我们忽略了它背后的一个预检机制，也就是说会有类似这样一个预检请求：\n\n\t1 OPTIONS /resources/post-here/ HTTP/1.1\n \t2 Host: www.google.com\n \t3 User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre\n \t4 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n \t5 Accept-Language: en-us,en;q=0.5\n \t6 Accept-Encoding: gzip,deflate\n \t7 Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\n \t8 Connection: keep-alive\n\t9 Origin: http://www.example.com\n\t10 Access-Control-Request-Method: POST\n\t11 Access-Control-Request-Headers: X-PINGOTHER\n\nOPTIONS就是告诉我们这是一个“预检”请求。里面有关键的Origin头信息。\n\n\tAccess-Control-Request-Method: POST\n\tAccess-Control-Request-Headers: X-PINGOTHER\n\n这两个头信息就告诉服务器，如果我发送请求的话将会是POST请求，我还可能自己定义个X-PINGOTHER的请求头信息。\n\n同样的，服务器也会响应这个预检的请求：\n\n\tHTTP/1.1 200 OK\n\tDate: Mon, 01 Dec 2008 01:15:39 GMT\n\tServer: Apache/2.0.61 (Unix)\n\tAccess-Control-Allow-Origin: http://www.example.com\n\tAccess-Control-Allow-Methods: POST, GET, OPTIONS\n\tAccess-Control-Allow-Headers: X-PINGOTHER\n\tAccess-Control-Max-Age: 1728000\n\tVary: Accept-Encoding, Origin\n\tContent-Encoding: gzip\n\tContent-Length: 0\n\tKeep-Alive: timeout=2, max=100\n\tConnection: Keep-Alive\n\tContent-Type: text/plain\n\n我们期待服务器同意我的跨域请求的Access-Control-Allow-Origin头也有了，告诉我服务器同意了。也同意了我想自定义一个请求头信息的愿望。\n\n下面还有一个响应头信息：\n\n\tAccess-Control-Max-Age: 1728000\n\n它呢，是用来控制这条预检请求的缓存时长的，在这1728000秒之内，都不用再发送预检请求了。\n\n因为整个预检的过程都是浏览器在后台神不知鬼不觉完成的，所以我们都不知道。\n\n\nCORS中的Cookie：\n\nCORS机制默认是不会发送cookie信息和HTTP的认证信息的，除非我们改变设置。可以这样：\n\n\txhr.withCredentials = true;\n\n同时服务器响应：\n\n\tAccess-Control-Allow-Credentials:true //这里值不能为*必须明确指定域名\n\n这时，我们在发送请求的时候才会捎带上cookie的信息，而且这里的cookie也遵循同源策略，只有服务器域名下的cookie信息才会被捎带。\n\n##二、HTTP请求和响应\n\n因为Ajax就是用来与服务器通信的，那么这里它就离不开HTTP，也就会去请求然后获得响应。这里稍微详细的了解下请求头与响应头相关的信息。\n\n一个 HTTP请求由4部分组成：\n\n　　-- HTTP请求方法或“动作”；\n\n　　-- 正在请求的URL；\n\n　　-- 一个可选的请求头集合，其中可能包括身份验证信息；\n\n　　-- 一个可选的请求主体 ；\n\n服务器返回的HTTP响应包含3部分：\n\n　　-- 一个数字和文字组成的状态码，用来显示请求的成功和失败\n\n　　-- 一个响应头集合\n\n　　-- 响应主体\n\n \n\n我在网上找了一个参数尽可能多的请求，下面是它的请求头信息和响应头信息：\n\n![图2.1](/img/21.png) \n\n2.1 Request Headers中的一些参数：\n\n1. Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n\n含义：浏览器支持的 MIME 类型分别是 text/html、application/xhtml+xml、application/xml 和 */*，优先顺序是它们从左到右的排列顺序。\n\n详解：\n\n　　-- Accept表示浏览器支持的 MIME 类型；\n\n　　-- MIME的英文全称是 Multipurpose Internet Mail Extensions（多功能 Internet 邮件扩充服务），它是一种多用途网际邮件扩充协议，在1992年最早应用于电子邮件系统，但后来也应用到浏览器;\n\n　　-- text/html,application/xhtml+xml,application/xml 都是 MIME 类型，也可以称为媒体类型和内容类型，斜杠前面的是 type（类型），斜杠后面的是 subtype（子类型）,type 指定大的范围，subtype 是 type 中范围更明确的类型，即大类中的小类;\n\n　　-- Text用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的;\n\n　　-- text/html表示 html 文档;\n\n　　-- Application：用于传输应用程序数据或者二进制数据;\n\n　　-- application/xhtml+xml表示 xhtml 文档;\n\n　　-- application/xml表示 xml 文档;\n\n　　-- q是权重系数，范围 0 =< q <= 1，q 值越大，请求越倾向于获得其“;”之前的类型表示的内容，若没有指定 q 值，则默认为1，若被赋值为0，则用于提醒服务器哪些是浏览器不接受的内容类型。\n\n2.Accept-Encoding: gzip, deflate\n\n含义：标示浏览器支持的压缩编码是gzip和deflate和sdcn。\n\n3.Accept-Language:zh-CN,zh;q=0.8\n\n含义：浏览器支持的语言，zh-CN是简体中文，zh是中文。\n\n4.Cache-Control:max-age=0(请求头中的Cache-Control)\n\n含义：Cache-Control头是用来在请求/响应这个过程中控制缓存的。\n\n他可以有的参数:\n\n　　max-age=0单位是秒，它表示客户端可接受的响应等待时间；\n\n　　max-stale表示客户端愿意接受一个响应，即使它已经超过了它新鲜的寿命（可以有值也可以没有值）；\n\n　　min-fresh=10他表示客户端愿意接受一个响应的保鲜寿命不小于目前的年龄加上指定的时间在几秒钟内；\n\n　　no-cache表示不接受缓存的响应；\n\n　　no-store表示缓存不可以保存请求和响应的任何部分；\n\n　　only-if-cache:它表示客户端只想要获得一个被缓存起来了的响应。\n\n5.Host\n\n含义：客户端指定自己想访问的WEB服务器的域名/IP 地址和端口号.\n\n6.Content-Type:application/x-www-form-urlencoded\n\n含义：请求头的Content-Type定义传递到服务器的数据类型，数据由服务器端处理！Content-Type后面的值就是一个MIME类型。application/x-www-form-urlencoded实际上就是指表单提交的数据，如果上传附件，就会是multipart/form-data。响应头的Content- Type定义返回到客户端的数据类型。\n\n其他一些常见易理解的参数，这里就不列举啦。\n\n \n\n2.2 Response Headers中的一些参数：\n\n1.Accept-Ranges:bytes\n\n含义：WEB服务器表明自己是否接受获取其某个实体的一部分（比如文件的一部分）的请求。bytes：表示接受，none：表示不接受。\n\n2.Cache-Control：Public\n\n　　   public(可以用 Cached 内容回应任何用户)\n         private（只能用缓存内容回应先前请求该内容的那个用户）\n         no-cache（可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端）\n         max-age：（本响应包含的对象的过期时间）\n         ALL:  no-store（不允许缓存）\n\n3.ETag\n\n含义：它是一个对象的标志值，用于确认请求的文件是否被更改。比如一个 html 文件，如果被修改了，其 Etag 也会别修改，所以，ETag 的作用跟 Last-Modified 的作用差不多，主要供 WEB 服务器判断一个对象是否改变了。比如前一次请求某个 html 文件时，获得了其 ETag，当这次又请求这个文件时，浏览器就会把先前获得的 ETag 值发送给  WEB 服务器，然后 WEB 服务器会把这个 ETag 跟该文件的当前 ETag 进行对比，然后就知道这个文件有没有改变了。\n\n4.Expires\n\n含义：WEB服务器表明该实体将在什么时候过期，对于过期了的对象，只有在跟WEB服务器验证了其有效性后，才能用来响应客户请求\n\n5.Last-Modified\n\n含义：WEB 服务器认为对象的最后修改时间，比如文件的最后修改时间，动态页面的最后产生时间等等\n\n[更为详细些的头部参数的说明](http://yolcy.blog.163.com/blog/static/105307937201022471913971/)\n\n2.3 GET请求和POST请求的区别\n\n也许你也曾想过GET和POST方法的区别，这里整理一下我了解到的：\n\nGET：\n\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\tGET方法用于向指定的资源或服务器请求数据\n\t--------------------------------------------------------------------------------\n\t1.GET请求可以被浏览器缓存\n\t2.GET请求保留在浏览器的历史记录中\n\t3.GET请求可以被收藏为书签\n\t4.GET请求不应该在处理敏感数据时使用，它的安全性有待商榷\n\t5.GET请求有长度的限制\n\t6.GET请求应当只用于取回数据\n\t7.GET请求从来没有主体，需要的查询参数要编码放在url后面作为查询字符串\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nPOST：\n\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\tPOST方法向指定的资源或服务器提交要被处理的数据\n\t------------------------------------------------------------------------------------\n\t1.POST请求不会被缓存\n\t2.POST请求不会保留在浏览器的历史记录中\n\t3.POST请求不能被收藏为书签\n\t4.POST请求对数据的长度没有要求\n\t5.POST请求通常有主体，用来提交要被处理的数据，xhr.send('数据')\n\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n如果想更加详细的学习HTTP协议相关的内容可以查看RFC：[RFC7230](https://tools.ietf.org/html/rfc7230#section-4.3.3) [RFC7231](https://tools.ietf.org/html/rfc7231) [RFC7232](https://tools.ietf.org/html/rfc7231) 等等\n\n\n##三.JQuery中的Ajax\n\n我们一般实际应用的时候大部分都是jQuery或Zepto中的Ajax了。\n\n我给自己列了些细节或要点，有时很有用，有时会避免错误：\n\n1.$.ajax()会返回创建的XMLHttpRequest对象，然后我们可以就可以应用xhr对象的一些属性或方法了，但大多数情况下我们不会用到，像这样：\n\n\thtmlobj=$.ajax({url:\"/jquery/test1.txt\",async:false});\n  \t$(\"#myDiv\").html(htmlobj.responseText);　\n\n2.cache：false\n\n　　有时候我们发送了个请求，返回的数据也得到了，但是后端同学在相同的接口中准备返回给你跟之前不同的数据比如说多一个字段，或少一个字段时。你肯定期待拿到新的数据了，但如果的你请求是get请求的话那么浏览器就会缓存你的Ajax请求，post请求一般不存在这个问题，于是你就纳闷了为什么数据没有变化。于是我们可以设置cache：false，使每次都发送请求而不是取缓存中的。\n\n　　3.context:document.body\n\n　　context参数可以指定回调函数的上下文，使回调函数中的$(this)指向context参数对应的DOM元素。\n\n　　4.dataType：'xml'/'jsonp'/'html'/'script'/'json'/'text'\n\n　　这是最简单务实的一个参数了，用于定于预期服务器返回的数据类型。设置值为‘script’时，将返回纯文本js代码，并且不会自动缓存结果，除非显示的设置cache为true，并且所有的POST请求都会被转为GET请求。设置值为‘jsonp’时，如果我们自己没有显示的定义回调函数的名字，jQuery会自动的帮我们添加，以正确的执行回调函数。这样我们回调函数的参数data就是json类型的数据了。\n\n##四.待扩展和实战的学习要点\n\n进一步准备学习和实战练习的：\n\n　　利用XMLHttpRequest对象特别是扩展了的二级XMLHttpRequest对象，我们还可以做很多事情，比如说：①Ajax上传文件（可以使用FormData接口或File API）②获得progress元素的上传进度（xhr对象的upload属性的progress事件）③使用abort()方法终止请求和实现超时 等等。\n\n　　HTTP用来在客户端和服务器之间建立连接进行交流，那么利用HTTP请求头信息和响应头信息其实也能做很多事情，比如：①正确的配置信息头实现请求的缓存，加快响应用户的速度②控制安全的请求同服务器交互等等。\n\n　　Jquery源码中ajax的实现方式，思想学习以及与Zepto中Ajax实现的不同。\n\n\n参考资料&相关阅读：\n\n[Ajax-Javascript标准参考教程](http://javascript.ruanyifeng.com/bom/ajax.html)\n[MDN UsingXMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest)\n[使用FormData对象](https://developer.mozilla.org/zh-CN/docs/Web/Guide/Using_FormData_Objects)\n[Web API接口查询表](https://developer.mozilla.org/zh-CN/docs/Web/API)\n[Using CORS](http://www.html5rocks.com/en/tutorials/cors/)　\n[http协议请求响应头中参数的疑问](http://www.zhihu.com/question/22073045)\n[JQuery源码分析](http://www.cnblogs.com/aaronjs/p/3279314.html)\n[Zeptojs Ajax API](http://www.css88.com/doc/zeptojs_api/#$.ajax)","slug":"ajax","published":1,"updated":"2015-04-12T02:36:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8hi8eoa000h2sbetartt7i5"},{"title":"关于对象的一些判断","date":"2015-01-22T15:23:32.000Z","_content":"\n我们经常会遇到这样的问题：判断一个对象是什么样的。是空对象（{}）？还是...？\n\n## 第一种情况\n\n这个肯定会：\n\n\tif(data != ''){\n\t\tdosomething\n\t}\n但不能只会，很多情况下需要判断的不是字符串，对不？那如果变成对象只会判断：\n\t\n\tif(obj != null){\n\t\tdosomething\n\t}\n那在好多情况下就又会进坑了...\n为什么呢？去这儿看看：[关于x==y的比较行为](http://barretlee.github.io/ST/ES5.1/#sec-11.9.3)\n\n## 第二种情况\n\n$.isPlainObject()\n\njQ中的这个方法在对象是通过{}或new Object()创建的的时候会返回true。Zepto中\n也有这个方法，大体相同。\n\n源码是这样的：\n\n\tisPlainObject: function( obj ) {\n\t\t// Not plain objects:\n\t\t// - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n\t\t// - DOM nodes\n\t\t// - window\n\t\tif ( jQuery.type( obj ) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( obj.constructor &&\n\t\t\t\t!hasOwn.call( obj.constructor.prototype, \"isPrototypeOf\" ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the function hasn't returned already, we're confident that\n\t\t// |obj| is a plain object, created by {} or constructed with new Object\n\t\treturn true;\n\t}\n\n可以试试了：\n\n\t$.isPlainObject({})          // => true\n\t$.isPlainObject({'a':'1'})         // => true\n\t$.isPlainObject(new Object())  // => true\n\t$.isPlainObject(new Date())   // => false\n\t$.isPlainObject(window)      // => false\n\n## 第三种情况\n\n判断一个对象是否为空对象：\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n不过有时候它也挺坑爹的：\n\n\t$.isEmptyObject({})   // => true\n\t$.isEmptyObject('')   // => true\n\t$.isEmptyObject(null)   // => true\n\t$.isEmptyObject(0)   // => true\n\t$.isEmptyObject(NaN)   // => true\n\t$.isEmptyObject(undefined)   // => true\n\t$.isEmptyObject({'a':'1'})   // => false\n\t$.isEmptyObject('str')   // => false\n\n其实，我们可以巧妙的应用toString()方法来判断数值类型，不管是基本的值类型还是对象：\n\n\tObject.prototype.toString.call(2) // \"[object Number]\"\n\tObject.prototype.toString.call('') // \"[object String]\"\n\tObject.prototype.toString.call(true) // \"[object Boolean]\"\n\tObject.prototype.toString.call(undefined) // \"[object Undefined]\"\n\tObject.prototype.toString.call(null) // \"[object Null]\"\n\tObject.prototype.toString.call(Math) // \"[object Math]\"\n\tObject.prototype.toString.call({}) // \"[object Object]\"\n\tObject.prototype.toString.call([]) // \"[object Array]\"\n\n稍微整理一下就可以像我们想要得到的那样来判断数值类型了，特殊的null和undefined也不会落下：\n\n\tvar type = function (o){\n\t    var s = Object.prototype.toString.call(o);\n\t        return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n\t};\n\n\ttype({}); // \"object\"\n\ttype([]); // \"array\"\n\ttype(5); // \"number\"\n\ttype(null); // \"null\"\n\ttype(); // \"undefined\"\n\ttype(/abcd/); // \"regex\"\n\ttype(new Date()); // \"date\"\n\n\n具体情况还是要具体分析，头脑清晰想清楚再判断好，再去做接下来的事情。少走些弯路。","source":"_posts/aboutObject.md","raw":"title: 关于对象的一些判断\ndate: 2015-01-22 23:23:32\ncategories: \n- 随记\ntags: \n- 那些年踩过的大坑和小坑\n---\n\n我们经常会遇到这样的问题：判断一个对象是什么样的。是空对象（{}）？还是...？\n\n## 第一种情况\n\n这个肯定会：\n\n\tif(data != ''){\n\t\tdosomething\n\t}\n但不能只会，很多情况下需要判断的不是字符串，对不？那如果变成对象只会判断：\n\t\n\tif(obj != null){\n\t\tdosomething\n\t}\n那在好多情况下就又会进坑了...\n为什么呢？去这儿看看：[关于x==y的比较行为](http://barretlee.github.io/ST/ES5.1/#sec-11.9.3)\n\n## 第二种情况\n\n$.isPlainObject()\n\njQ中的这个方法在对象是通过{}或new Object()创建的的时候会返回true。Zepto中\n也有这个方法，大体相同。\n\n源码是这样的：\n\n\tisPlainObject: function( obj ) {\n\t\t// Not plain objects:\n\t\t// - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n\t\t// - DOM nodes\n\t\t// - window\n\t\tif ( jQuery.type( obj ) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( obj.constructor &&\n\t\t\t\t!hasOwn.call( obj.constructor.prototype, \"isPrototypeOf\" ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the function hasn't returned already, we're confident that\n\t\t// |obj| is a plain object, created by {} or constructed with new Object\n\t\treturn true;\n\t}\n\n可以试试了：\n\n\t$.isPlainObject({})          // => true\n\t$.isPlainObject({'a':'1'})         // => true\n\t$.isPlainObject(new Object())  // => true\n\t$.isPlainObject(new Date())   // => false\n\t$.isPlainObject(window)      // => false\n\n## 第三种情况\n\n判断一个对象是否为空对象：\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n不过有时候它也挺坑爹的：\n\n\t$.isEmptyObject({})   // => true\n\t$.isEmptyObject('')   // => true\n\t$.isEmptyObject(null)   // => true\n\t$.isEmptyObject(0)   // => true\n\t$.isEmptyObject(NaN)   // => true\n\t$.isEmptyObject(undefined)   // => true\n\t$.isEmptyObject({'a':'1'})   // => false\n\t$.isEmptyObject('str')   // => false\n\n其实，我们可以巧妙的应用toString()方法来判断数值类型，不管是基本的值类型还是对象：\n\n\tObject.prototype.toString.call(2) // \"[object Number]\"\n\tObject.prototype.toString.call('') // \"[object String]\"\n\tObject.prototype.toString.call(true) // \"[object Boolean]\"\n\tObject.prototype.toString.call(undefined) // \"[object Undefined]\"\n\tObject.prototype.toString.call(null) // \"[object Null]\"\n\tObject.prototype.toString.call(Math) // \"[object Math]\"\n\tObject.prototype.toString.call({}) // \"[object Object]\"\n\tObject.prototype.toString.call([]) // \"[object Array]\"\n\n稍微整理一下就可以像我们想要得到的那样来判断数值类型了，特殊的null和undefined也不会落下：\n\n\tvar type = function (o){\n\t    var s = Object.prototype.toString.call(o);\n\t        return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n\t};\n\n\ttype({}); // \"object\"\n\ttype([]); // \"array\"\n\ttype(5); // \"number\"\n\ttype(null); // \"null\"\n\ttype(); // \"undefined\"\n\ttype(/abcd/); // \"regex\"\n\ttype(new Date()); // \"date\"\n\n\n具体情况还是要具体分析，头脑清晰想清楚再判断好，再去做接下来的事情。少走些弯路。","slug":"aboutObject","published":1,"updated":"2015-04-12T03:04:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8hi8eoc000l2sbeantprkud"}],"PostAsset":[],"PostCategory":[{"post_id":"ci8hi8eo300072sbey5fc7y9o","category_id":"ci8hi8eo400082sbeio3n632z","_id":"ci8hi8eo5000b2sbegt7ybdde"},{"post_id":"ci8hi8eo6000c2sbe29dc63jp","category_id":"ci8hi8eo400082sbeio3n632z","_id":"ci8hi8eo7000d2sbeiptneuf4"},{"post_id":"ci8hi8eoa000h2sbetartt7i5","category_id":"ci8hi8eoa000i2sbeuk1oczfa","_id":"ci8hi8eob000k2sbemh4h9jna"},{"post_id":"ci8hi8eoc000l2sbeantprkud","category_id":"ci8hi8eod000m2sbepnxj5533","_id":"ci8hi8eod000p2sbeit529mi3"}],"PostTag":[{"post_id":"ci8hi8env00022sbefkiv0dst","tag_id":"ci8hi8enz00032sbegl8bhedb","_id":"ci8hi8eo000042sbelfdkxrko"},{"post_id":"ci8hi8eo200052sbe6tdtwomb","tag_id":"ci8hi8enz00032sbegl8bhedb","_id":"ci8hi8eo300062sbesjyz2oq1"},{"post_id":"ci8hi8eo300072sbey5fc7y9o","tag_id":"ci8hi8eo400092sbeydztz7f5","_id":"ci8hi8eo5000a2sbe34t3ome1"},{"post_id":"ci8hi8eo6000c2sbe29dc63jp","tag_id":"ci8hi8eo400092sbeydztz7f5","_id":"ci8hi8eo7000e2sbe2wo0nffy"},{"post_id":"ci8hi8eo8000f2sbe4zowkp6v","tag_id":"ci8hi8eo400092sbeydztz7f5","_id":"ci8hi8eo9000g2sbeog2dnp1v"},{"post_id":"ci8hi8eoa000h2sbetartt7i5","tag_id":"ci8hi8eo400092sbeydztz7f5","_id":"ci8hi8eob000j2sbeimczo6ae"},{"post_id":"ci8hi8eoc000l2sbeantprkud","tag_id":"ci8hi8eod000n2sbeplqh0pdp","_id":"ci8hi8eod000o2sbexgdr7q1s"}],"Tag":[{"name":"实用小技巧","_id":"ci8hi8enz00032sbegl8bhedb"},{"name":"博客","_id":"ci8hi8eo400092sbeydztz7f5"},{"name":"那些年踩过的大坑和小坑","_id":"ci8hi8eod000n2sbeplqh0pdp"}]}}{
  "name": "hexo-site",
  "version": "0.0.0",
  "private": true,
  "hexo": {
    "version": "3.0.1"
  },
  "dependencies": {
    "hexo": "^3.0.0",
    "hexo-deployer-git": "0.0.4",
    "hexo-generator-archive": "^0.1.0",
    "hexo-generator-category": "^0.1.0",
    "hexo-generator-index": "^0.1.0",
    "hexo-generator-tag": "^0.1.0",
    "hexo-renderer-ejs": "^0.1.0",
    "hexo-renderer-marked": "^0.2.4",
    "hexo-renderer-stylus": "^0.2.0",
    "hexo-server": "^0.1.2"
  }
}
